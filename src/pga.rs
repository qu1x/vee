// Copyright Â© 2025 Rouven Spreckels <rs@qu1x.dev>
//
// This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of
// the MPL was not distributed with this file, You can obtain one at https://mozilla.org/MPL/2.0/.

//! Planed-Based Pistachio Flavor -- Projective Geometric Algebra (PGA)

use super::{Algebra, Choose, Multivector};
use core::{
    cmp::Ordering,
    fmt::{self, Debug, Display, Error, Write},
    ops::{Mul, Not},
};

/// Basis blade of Elliptic 0D PGA.
pub type PgaE0 = Pga<1, 0>;
/// Basis blade of Elliptic 1D PGA.
pub type PgaE1 = Pga<1, 1>;
/// Basis blade of Elliptic 2D PGA.
pub type PgaE2 = Pga<1, 2>;
/// Basis blade of Elliptic 3D PGA.
pub type PgaE3 = Pga<1, 3>;
/// Basis blade of Elliptic 4D PGA (experimental).
pub type PgaE4 = Pga<1, 4>;
/// Basis blade of Elliptic 5D PGA (experimental, no inverse).
pub type PgaE5 = Pga<1, 5>;
/// Basis blade of Elliptic 6D PGA (experimental, no inverse).
pub type PgaE6 = Pga<1, 6>;
/// Basis blade of Elliptic 7D PGA (experimental, no inverse).
pub type PgaE7 = Pga<1, 7>;

/// Basis blade of Hyperbolic 0D PGA.
pub type PgaH0 = Pga<-1, 0>;
/// Basis blade of Hyperbolic 1D PGA.
pub type PgaH1 = Pga<-1, 1>;
/// Basis blade of Hyperbolic 2D PGA.
pub type PgaH2 = Pga<-1, 2>;
/// Basis blade of Hyperbolic 3D PGA.
pub type PgaH3 = Pga<-1, 3>;
/// Basis blade of Hyperbolic 4D PGA (experimental).
pub type PgaH4 = Pga<-1, 4>;
/// Basis blade of Hyperbolic 5D PGA (experimental, no inverse).
pub type PgaH5 = Pga<-1, 5>;
/// Basis blade of Hyperbolic 6D PGA (experimental, no inverse).
pub type PgaH6 = Pga<-1, 6>;
/// Basis blade of Hyperbolic 7D PGA (experimental, no inverse).
pub type PgaH7 = Pga<-1, 7>;

/// Basis blade of Parabolic (Euclidean) 0D PGA.
pub type PgaP0 = Pga<0, 0>;
/// Basis blade of Parabolic (Euclidean) 1D PGA.
pub type PgaP1 = Pga<0, 1>;
/// Basis blade of Parabolic (Euclidean) 2D PGA.
pub type PgaP2 = Pga<0, 2>;
/// Basis blade of Parabolic (Euclidean) 3D PGA.
pub type PgaP3 = Pga<0, 3>;
/// Basis blade of Parabolic (Euclidean) 4D PGA (experimental).
pub type PgaP4 = Pga<0, 4>;
/// Basis blade of Parabolic (Euclidean) 5D PGA (experimental, no inverse).
pub type PgaP5 = Pga<0, 5>;
/// Basis blade of Parabolic (Euclidean) 6D PGA (experimental, no inverse).
pub type PgaP6 = Pga<0, 6>;
/// Basis blade of Parabolic (Euclidean) 7D PGA (experimental, no inverse).
pub type PgaP7 = Pga<0, 7>;

/// Basis blade of PGA with metric $`M\in\{\pm 1,0\}`$ and embedded dimension $`N\in[0, 7]`$.
///
/// ```gdef
/// \gdef\e{
///   \boldsymbol e
/// }
/// \gdef\I{
///   \boldsymbol I
/// }
/// ```
#[derive(Debug, Clone, Copy, Eq, PartialEq, Default)]
pub struct Pga<const M: i8, const N: u32> {
    pub(crate) idx: u8,
}

/// Flavor-specific methods.
impl<const M: i8, const N: u32> Pga<M, N> {
    /// Creates basis blade from $`\e`$-notation.
    ///
    /// ```
    /// use vee::pga::PgaP3;
    ///
    /// let e = PgaP3::new("e");
    /// let e0 = PgaP3::new("e0");
    /// let e1 = PgaP3::new("e1");
    /// let e2 = PgaP3::new("e2");
    /// let e12 = PgaP3::new("e12");
    ///
    /// assert_eq!(e1 * e2, (1, e12));
    /// assert_eq!(e2 * e1, (-1, e12));
    /// assert_eq!(e0 * e0, (0, e));
    /// ```
    #[must_use]
    pub const fn new(sym: &'static str) -> Self {
        Self {
            #[allow(clippy::cast_possible_truncation)]
            idx: BasisBlade::new(N as u8, sym).idx,
        }
    }
    /// Constructs Cayley table.
    ///
    /// # Errors
    ///
    /// Fails in case of formatting errors.
    pub fn table() -> Result<String, Error> {
        let basis_len = Self::basis().len();
        let blade_len = N as usize + 3;
        let table_len = blade_len * basis_len.pow(2) + basis_len;
        let mut table = String::with_capacity(table_len);
        let mut blade = String::with_capacity(blade_len);
        for row in Self::basis() {
            for col in Self::basis() {
                let (sig, mul) = row * col;
                blade.clear();
                if sig == 0 {
                    write!(&mut blade, "0")?;
                } else {
                    let sig = if sig > 0 { " " } else { "-" };
                    write!(&mut blade, "{sig}{mul}")?;
                }
                write!(&mut table, "{blade:>blade_len$}")?;
            }
            writeln!(&mut table)?;
        }
        debug_assert_eq!(table.len(), table_len);
        Ok(table)
    }
}

impl<const M: i8, const N: u32> Algebra for Pga<M, N> {
    const N: u32 = N;

    #[inline]
    fn basis() -> impl ExactSizeIterator<Item = Self> + DoubleEndedIterator<Item = Self> {
        TAB[N as usize].iter().map(|b| Self { idx: b.idx })
    }
    #[inline]
    fn blade_len(&self) -> usize {
        (N + 1).choose(self.grade()) as usize
    }
    #[inline]
    fn grade(&self) -> u32 {
        self.idx.count_ones()
    }
}

impl<const M: i8, const N: u32> Mul for Pga<M, N> {
    type Output = (i8, Self);

    fn mul(self, other: Self) -> Self::Output {
        let [lhs, rhs] = [self, other].map(|b| b.idx);
        let mul = Self { idx: lhs ^ rhs };
        let cnt = ((1..=N).fold(0, |p, n| p ^ (lhs >> n)) & rhs).count_ones()
            + [self, other, mul]
                .map(|b| u32::from(LUT[N as usize][b.idx as usize].cnt))
                .into_iter()
                .sum::<u32>();
        let sig = if cnt & 1 == 0 { 1 } else { -1 };
        let sig = if lhs & rhs & 1 == 0 { sig } else { sig * M };
        (sig, mul)
    }
}

impl<const M: i8, const N: u32> Not for Pga<M, N> {
    type Output = (i8, Self);

    #[inline]
    fn not(self) -> Self::Output {
        let pss = const { u8::MAX >> (u8::BITS - (N + 1)) };
        let not = Self {
            idx: !self.idx & pss,
        };
        let (sig, _pss) = self * not;
        (sig, not)
    }
}

impl<const M: i8, const N: u32> Ord for Pga<M, N> {
    #[inline]
    fn cmp(&self, other: &Self) -> Ordering {
        let [lhs, rhs] = [self, other].map(|b| b.idx as usize);
        self.grade()
            .cmp(&other.grade())
            .then(LUT[N as usize][lhs].idx.cmp(&LUT[N as usize][rhs].idx))
    }
}

impl<const M: i8, const N: u32> PartialOrd for Pga<M, N> {
    #[inline]
    fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
        Some(self.cmp(other))
    }
}

impl<const M: i8, const N: u32> Display for Pga<M, N> {
    #[inline]
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        Display::fmt(LUT[N as usize][self.idx as usize].sym, f)
    }
}

#[derive(Debug, Copy, Clone)]
struct BasisBlade {
    sym: &'static str,
    cnt: u8,
    idx: u8,
}

impl BasisBlade {
    const fn new(dim: u8, mut sym: &'static str) -> Self {
        let s = sym.as_bytes();
        assert!(s[0] == b'e');
        let mut i = 1;
        let mut idx = 0;
        let mut cnt = 0;
        let mut lst = 0;
        while i < sym.len() {
            assert!(b'0' <= s[i] && s[i] <= b'9');
            idx |= 1 << (s[i] - b'0');
            if lst > b'0' && lst > s[i] {
                cnt += 1;
            }
            lst = s[i];
            i += 1;
        }
        match sym.len() - 1 {
            0 => sym = "1",
            l if l == dim as usize + 1 => sym = "I",
            _ => {}
        }
        Self { sym, cnt, idx }
    }
    const fn tab<const LEN: usize>(sym: [&'static str; LEN]) -> [Self; LEN] {
        let mut tab = [Self {
            sym: "",
            cnt: 0,
            idx: 0,
        }; LEN];
        let mut pss = 0;
        let mut i = 0;
        while i < LEN {
            #[allow(clippy::cast_possible_truncation)]
            let len = sym[i].len() as u8;
            if len > pss {
                pss = len;
            }
            i += 1;
        }
        let mut i = 0;
        while i < LEN {
            tab[i] = Self::new(pss - 2, sym[i]);
            i += 1;
        }
        tab
    }
    const fn lut<const LEN: usize>(tab: [Self; LEN]) -> [Self; LEN] {
        let mut lut = tab;
        let mut idx = 0;
        while idx < LEN {
            lut[tab[idx].idx as usize] = Self {
                sym: tab[idx].sym,
                cnt: tab[idx].cnt,
                #[allow(clippy::cast_possible_truncation)]
                idx: if idx >= LEN / 2 {
                    LEN - idx + LEN / 2
                } else {
                    idx
                } as u8,
            };
            idx += 1;
        }
        lut
    }
}

const TAB: [&[BasisBlade]; 8] = [&TAB0, &TAB1, &TAB2, &TAB3, &TAB4, &TAB5, &TAB6, &TAB7];
const LUT: [&[BasisBlade]; 8] = [&LUT0, &LUT1, &LUT2, &LUT3, &LUT4, &LUT5, &LUT6, &LUT7];

macro_rules! basis {
    ($t:ident, $u:ident, $n:tt, $l:tt, [$(($s:tt, $b:tt),)*]) => {
        #[doc = concat!("The basis blades of the PGA with embedded dimension $`N = ", $n, "`$.")]
        ///
        /// ```gdef
        /// \gdef\idx#1{\expandafter\sub#1\relax}
        /// \gdef\sub#1#2\relax{#2}
        /// \gdef\fmt#1{\e_{\idx{#1}}}
        /// \gdef\e{\boldsymbol e}
        /// ```
        impl<const M: i8> Multivector<Pga<M, $n>> {
            $(
                #[doc = concat!(
                    "The multivector of basis blade $`",
                    stringify!($s),
                    "\\fmt{",
                    stringify!($b),
                    "}`$.",
                )]
                #[must_use]
                #[inline]
                pub fn $b() -> Self {
                    Self::new([(stringify!($s), const { Pga::new(stringify!($b)) })])
                }
            )*
        }
        const $t: [BasisBlade; $l] = BasisBlade::tab([$(stringify!($b),)*]);
        const $u: [BasisBlade; $l] = BasisBlade::lut($t);
    };
}

#[rustfmt::skip]
basis!(TAB0, LUT0, 0, 2, [
    (v, e),
    (V, e0),
]);
#[rustfmt::skip]
basis!(TAB1, LUT1, 1, 4, [
    (v, e),
    (W, e0),
    (w, e1),
    (V, e01),
]);
#[rustfmt::skip]
basis!(TAB2, LUT2, 2, 8, [
    (v, e),
    (W, e0),
    (x, e1),
    (y, e2),
    (Y, e01),
    (X, e20),
    (w, e12),
    (V, e012),
]);
#[rustfmt::skip]
basis!(TAB3, LUT3, 3, 16, [
    (v, e),
    (W, e0),
    (x, e1),
    (y, e2),
    (z, e3),
    (X, e01),
    (Y, e02),
    (Z, e03),
    (z, e12),
    (y, e31),
    (x, e23),
    (Z, e021),
    (Y, e013),
    (X, e032),
    (w, e123),
    (V, e0123),
]);
#[rustfmt::skip]
basis!(TAB4, LUT4, 4, 32, [
    (v, e),
    (W, e0),
    (x, e1),
    (y, e2),
    (z, e3),
    (Ã°, e4),
    (X, e01),
    (Y, e02),
    (Z, e03),
    (Ã, e40),
    (a, e23),
    (b, e31),
    (c, e12),
    (d, e41),
    (e, e42),
    (f, e43),
    (F, e021),
    (E, e013),
    (D, e032),
    (C, e034),
    (B, e024),
    (A, e014),
    (Ã°, e123),
    (z, e124),
    (y, e314),
    (x, e234),
    (Ã, e0123),
    (Z, e0214),
    (Y, e0134),
    (X, e0324),
    (w, e1234),
    (V, e01234),
]);
#[rustfmt::skip]
basis!(TAB5, LUT5, 5, 64, [
    (v, e),
    (W, e0),
    (x, e1),
    (y, e2),
    (z, e3),
    (Ã°, e4),
    (Ã¸, e5),
    (X, e01),
    (Y, e02),
    (Z, e03),
    (Ã, e40),
    (Ã, e05),
    (a, e23),
    (b, e31),
    (c, e12),
    (d, e41),
    (e, e42),
    (f, e43),
    (g, e15),
    (h, e25),
    (i, e35),
    (j, e45),
    (A, e015),
    (B, e052),
    (C, e035),
    (D, e054),
    (E, e014),
    (F, e042),
    (G, e034),
    (H, e032),
    (I, e013),
    (J, e021),
    (j, e345),
    (i, e245),
    (h, e145),
    (g, e152),
    (f, e315),
    (e, e253),
    (d, e123),
    (c, e124),
    (b, e134), 
    (a, e234),
    (J, e0123),
    (I, e0214),
    (H, e0134),
    (G, e0324),
    (F, e0215),
    (E, e0135),
    (D, e0325),
    (C, e0345),
    (B, e0245),
    (A, e0145),
    (Ã¸, e1234),
    (Ã°, e1235),
    (z, e1245),
    (y, e3145),
    (x, e2345),
    (Ã, e01243),
    (Ã, e01235),
    (Z, e02145),
    (Y, e01345),
    (X, e03245),
    (w, e12345),
    (V, e012345),
]);
#[rustfmt::skip]
basis!(TAB6, LUT6, 6, 128, [
    // 1
    (v, e),
    // 1
    (W, e0),
    // 6
    (x, e1),
    (y, e2),
    (z, e3),
    (Ã°, e4),
    (Ã¸, e5),
    (Ã¾, e6),
    // 6
    (X, e01),
    (Y, e02),
    (Z, e03),
    (Ã, e40),
    (Ã, e05),
    (Ã, e60),
    // 15
    (Î±, e23),
    (Î², e31),
    (Î³, e12),
    (Î´, e41),
    (Îµ, e42),
    (Î¶, e43),
    (Î·, e15),
    (Î¸, e25),
    (Î¹, e35),
    (Îº, e45),
    (Î», e16),
    (Î¼, e62),
    (Î½, e36),
    (Î¾, e64),
    (Î¿, e56),
    // 15
    (Î, e015),
    (Î, e052),
    (Î, e035),
    (Î, e054),
    (Î, e014),
    (Î, e042),
    (Î, e034),
    (Î, e032),
    (Î, e013),
    (Î, e021),
    (Î, e016),
    (Î, e062),
    (Î, e036),
    (Î, e064),
    (Î, e056),
    // 20
    (a, e345),
    (b, e245),
    (c, e145),
    (d, e152),
    (e, e315),
    (f, e253),
    (g, e123),
    (h, e124),
    (i, e134),
    (j, e234),
    (k, e126),
    (l, e163),
    (m, e146),
    (n, e165),
    (o, e236),
    (p, e264),
    (q, e256),
    (r, e346),
    (s, e365),
    (t, e456),
    // 20
    (T, e0123),
    (S, e0124),
    (R, e0125),
    (Q, e0134),
    (P, e0135),
    (O, e0145),
    (N, e0234),
    (M, e0235),
    (L, e0245),
    (K, e0345),
    (J, e0156),
    (I, e0265),
    (H, e0356),
    (G, e0465),
    (F, e0146),
    (E, e0264),
    (D, e0346),
    (C, e0263),
    (B, e0136),
    (A, e0162),
    // 15
    (Î¿, e1234),
    (Î¾, e1235),
    (Î½, e1245),
    (Î¼, e1345),
    (Î», e2345),
    (Îº, e3465),
    (Î¹, e2465),
    (Î¸, e1465),
    (Î·, e1256),
    (Î¶, e1356),
    (Îµ, e2356),
    (Î´, e1263),
    (Î³, e1264),
    (Î², e1364),
    (Î±, e2364),
    // 15
    (Î, e01234),
    (Î, e01235),
    (Î, e01245),
    (Î, e01345),
    (Î, e02345),
    (Î, e01236),
    (Î, e01264),
    (Î, e01346),
    (Î, e02364),
    (Î, e01265),
    (Î, e01356),
    (Î, e02365),
    (Î, e03456),
    (Î, e02456),
    (Î, e01456),
    // 6
    (Ã¾, e12345),
    (Ã¸, e12346),
    (Ã°, e12356),
    (z, e12456),
    (y, e13465),
    (x, e23456),
    // 6
    (Ã, e012345),
    (Ã, e012436),
    (Ã, e012356),
    (Z, e021456),
    (Y, e013456),
    (X, e032456),
    // 1
    (w, e123456),
    // 1
    (V, e0123456),
]);
#[rustfmt::skip]
basis!(TAB7, LUT7, 7, 256, [
    // 1
    (v, e),
    // 1
    (W, e0),
    // 7
    (x, e1),
    (y, e2),
    (z, e3),
    (Ã°, e4),
    (Ã¸, e5),
    (Ã¾, e6),
    (Å, e7),
    // 7
    (X, e01),
    (Y, e02),
    (Z, e03),
    (Ã, e04),
    (Ã, e05),
    (Ã, e06),
    (Å, e07),
    // 21
    (Î±, e23),
    (Î², e31),
    (Î³, e12),
    (Î´, e41),
    (Îµ, e42),
    (Î¶, e43),
    (Î·, e15),
    (Î¸, e25),
    (Î¹, e35),
    (Îº, e45),
    (Î», e16),
    (Î¼, e62),
    (Î½, e36),
    (Î¾, e64),
    (Î¿, e56),
    (Ï, e17),
    (Ï, e27),
    (Ï, e37),
    (Ï, e47),
    (Ï, e57),
    (Ï, e67),
    // 21
    (Î, e012),
    (Î, e013),
    (Î, e014),
    (Î, e015),
    (Î, e016),
    (Î, e017),
    (Î, e023),
    (Î, e024),
    (Î, e025),
    (Î, e026),
    (Î, e027),
    (Î, e034),
    (Î, e035),
    (Î, e036),
    (Î, e037),
    (Î , e045),
    (Î¡, e046),
    (Î£, e047),
    (Î¤, e056),
    (Î¥, e057),
    (Î¦, e067),
    // 35
    (a, e123),
    (b, e124),
    (c, e125),
    (d, e126),
    (e, e127),
    (f, e134),
    (g, e135),
    (h, e136),
    (i, e137),
    (j, e145),
    (k, e146),
    (l, e147),
    (m, e156),
    (n, e157),
    (o, e167),
    (p, e234),
    (q, e235),
    (r, e236),
    (s, e237),
    (t, e245),
    (u, e246),
    (Ã¡, e247),
    (Ã¤, e256),
    (Ã¥, e257),
    (Ã¦, e267),
    (Ã§, e345),
    (Ã©, e346),
    (Ã«, e347),
    (Ã­, e356),
    (Ã¯, e357),
    (Ã±, e367),
    (Ã³, e456),
    (Ã¶, e457),
    (Ãº, e467),
    (Ã¼, e567),
    // 35
    (A, e0123),
    (B, e0124),
    (C, e0125),
    (D, e0126),
    (E, e0127),
    (F, e0134),
    (G, e0135),
    (H, e0136),
    (I, e0137),
    (J, e0145),
    (K, e0146),
    (L, e0147),
    (M, e0156),
    (N, e0157),
    (O, e0167),
    (P, e0234),
    (Q, e0235),
    (R, e0236),
    (S, e0237),
    (T, e0245),
    (U, e0246),
    (Ã, e0247),
    (Ã, e0256),
    (Ã, e0257),
    (Ã, e0267),
    (Ã, e0345),
    (Ã, e0346),
    (Ã, e0347),
    (Ã, e0356),
    (Ã, e0357),
    (Ã, e0367),
    (Ã, e0456),
    (Ã, e0457),
    (Ã, e0467),
    (Ã, e0567),
    // 35
    (Ã¼, e1234),
    (Ãº, e1253),
    (Ã¶, e1236),
    (Ã³, e1273),
    (Ã±, e1245),
    (Ã¯, e1264),
    (Ã­, e1247),
    (Ã«, e1256),
    (Ã©, e1275),
    (Ã§, e1267),
    (Ã¦, e1354),
    (Ã¥, e1346),
    (Ã¤, e1374),
    (Ã¡, e1365),
    (u, e1357),
    (t, e1376),
    (s, e1456),
    (r, e1475),
    (q, e1467),
    (p, e1576),
    (o, e2345),
    (n, e2364),
    (m, e2347),
    (l, e2356),
    (k, e2375),
    (j, e2367),
    (i, e2465),
    (h, e2457),
    (g, e2476),
    (f, e2567),
    (e, e3456),
    (d, e3475),
    (c, e3467),
    (b, e3576),
    (a, e4567),
    // 35
    (Ã, e01243),
    (Ã, e01235),
    (Ã, e01263),
    (Ã, e01237),
    (Ã, e01254),
    (Ã, e01246),
    (Ã, e01274),
    (Ã, e01265),
    (Ã, e01257),
    (Ã, e01276),
    (Ã, e01345),
    (Ã, e01364),
    (Ã, e01347),
    (Ã, e01356),
    (U, e01375),
    (T, e01367),
    (S, e01465),
    (R, e01457),
    (Q, e01476),
    (P, e01567),
    (O, e02354),
    (N, e02346),
    (M, e02374),
    (L, e02365),
    (K, e02357),
    (J, e02376),
    (I, e02456),
    (H, e02475),
    (G, e02467),
    (F, e02576),
    (E, e03465),
    (D, e03457),
    (C, e03476),
    (B, e03567),
    (A, e04576),
    // 21
    (Ï, e12345),
    (Ï, e12364),
    (Ï, e12347),
    (Ï, e12356),
    (Ï, e12375),
    (Ï, e12367),
    (Î¿, e12465),
    (Î¾, e12457),
    (Î½, e12476),
    (Î¼, e12567),
    (Î», e13456),
    (Îº, e13475),
    (Î¹, e13467),
    (Î¸, e13576),
    (Î·, e14567),
    (Î¶, e23465),
    (Îµ, e23457),
    (Î´, e23476),
    (Î³, e23567),
    (Î², e24576),
    (Î±, e34567),
    // 21
    (Î¦, e012345),
    (Î¥, e012364),
    (Î¤, e012356),
    (Î£, e012465),
    (Î¡, e013456),
    (Î , e023465),
    (Î, e012347),
    (Î, e012357),
    (Î, e012457),
    (Î, e013457),
    (Î, e023457),
    (Î, e012367),
    (Î, e012476),
    (Î, e013467),
    (Î, e023647),
    (Î, e012576),
    (Î, e013567),
    (Î, e023657),
    (Î, e034567),
    (Î, e024567),
    (Î, e014567),
    // 7
    (Å, e123456),
    (Ã¾, e123475),
    (Ã¸, e123467),
    (Ã°, e123576),
    (z, e124567),
    (y, e134657),
    (x, e234567),
    // 7
    (Å, e0124356),
    (Ã, e0123457),
    (Ã, e0124367),
    (Ã, e0123567),
    (Z, e0214567),
    (Y, e0134567),
    (X, e0324567),
    // 1
    (w, e1234567),
    // 1
    (V, e01234567),
]);

/// The named entities of the PGA with embedded dimension $`N = 0`$.
///
/// ```gdef
/// \gdef\e{
///   \boldsymbol e
/// }
/// \gdef\I{
///   \boldsymbol I
/// }
/// ```
impl<const M: i8> Multivector<Pga<M, 0>> {
    /// The multivector of scalar $`s \equiv v\e`$ where $`\e \equiv 1`$.
    #[must_use]
    #[inline]
    pub fn scalar() -> Self {
        Self::e()
    }
    /// The multivector of pseudoscalar $`S \equiv V\I`$ where $`\I \equiv \e_0`$.
    #[must_use]
    #[inline]
    pub fn pseudoscalar() -> Self {
        Self::e0()
    }
    /// The multivector of norm $`n \equiv s + S`$.
    #[must_use]
    #[inline]
    pub fn norm() -> Self {
        Self::scalar() + Self::pseudoscalar()
    }
}

/// The named entities of the PGA with embedded dimension $`N = 1`$.
///
/// ```gdef
/// \gdef\e{
///   \boldsymbol e
/// }
/// \gdef\I{
///   \boldsymbol I
/// }
/// ```
impl<const M: i8> Multivector<Pga<M, 1>> {
    /// The multivector of scalar $`s \equiv v\e`$ where $`\e \equiv 1`$.
    #[must_use]
    #[inline]
    pub fn scalar() -> Self {
        Self::e()
    }
    /// The multivector of pseudoscalar $`S \equiv V\I`$ where $`\I \equiv \e_{01}`$.
    #[must_use]
    #[inline]
    pub fn pseudoscalar() -> Self {
        Self::e01()
    }
    /// The multivector of norm $`n \equiv s + S`$.
    #[must_use]
    #[inline]
    pub fn norm() -> Self {
        Self::scalar() + Self::pseudoscalar()
    }
    /// The multivector of weight $`P_0 \equiv w\e_1`$.
    #[must_use]
    #[inline]
    pub fn weight() -> Self {
        Self::e1()
    }
    /// The multivector of direction $`P_\infty \equiv W\e_0`$.
    #[must_use]
    #[inline]
    pub fn direction() -> Self {
        Self::e0()
    }
    /// The multivector of point $`P \equiv P_0 + P_\infty`$.
    #[must_use]
    #[inline]
    pub fn point() -> Self {
        Self::weight() + Self::direction()
    }
    /// The multivector of translator $`t \equiv s + S`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP1 as Vee};
    ///
    /// let translator = Vee::point().lhs() * Vee::point().rhs();
    ///
    /// assert_eq!(translator.basis_blades(), Vee::translator().basis_blades());
    /// format_eq!(translator, [
    ///     "+wÍwÍ",
    ///     "+(+WÍwÍ-WÍwÍ)I",
    /// ]);
    ///
    /// let point = Vee::point().pin() << Vee::translator();
    ///
    /// assert_eq!(point.basis_blades(), Vee::point().basis_blades());
    /// format_eq!(point, [
    ///     "+(+[+vv]WÍ+[+2Vv]wÍ)e0",
    ///     "+[+vv]wÍe1",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn translator() -> Self {
        Self::norm()
    }
}

/// The named entities of the PGA with embedded dimension $`N = 2`$.
///
/// ```gdef
/// \gdef\e{
///   \boldsymbol e
/// }
/// \gdef\I{
///   \boldsymbol I
/// }
/// ```
impl<const M: i8> Multivector<Pga<M, 2>> {
    /// The multivector of scalar $`s \equiv v\e`$ where $`\e \equiv 1`$.
    #[must_use]
    #[inline]
    pub fn scalar() -> Self {
        Self::e()
    }
    /// The multivector of pseudoscalar $`S \equiv V\I`$ where $`\I \equiv \e_{012}`$.
    #[must_use]
    #[inline]
    pub fn pseudoscalar() -> Self {
        Self::e012()
    }
    /// The multivector of norm $`n \equiv s + S`$.
    #[must_use]
    #[inline]
    pub fn norm() -> Self {
        Self::scalar() + Self::pseudoscalar()
    }
    /// The multivector of moment $`\ell_\infty \equiv W\e_0`$.
    #[must_use]
    #[inline]
    pub fn moment() -> Self {
        Self::e0()
    }
    /// The multivector of displacement $`\ell_0 \equiv x\e_1 + y\e_2`$.
    #[must_use]
    #[inline]
    pub fn displacement() -> Self {
        Self::e1() + Self::e2()
    }
    /// The multivector of line $`\ell \equiv \ell_0 + \ell_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP2 as Vee};
    ///
    /// let line = Vee::point().lhs() & Vee::point().rhs();
    ///
    /// assert_eq!(line.basis_blades(), Vee::line().basis_blades());
    /// format_eq!(line, [
    ///     "+(+XÍYÍ-XÍYÍ)e0",
    ///     "+(+YÍwÍ-YÍwÍ)e1",
    ///     "+(-XÍwÍ+XÍwÍ)e2",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn line() -> Self {
        Self::moment() + Self::displacement()
    }
    /// The multivector of direction $`P_\infty \equiv X\e_{20} + Y\e_{01}`$.
    #[must_use]
    #[inline]
    pub fn direction() -> Self {
        Self::e20() + Self::e01()
    }
    /// The multivector of weight $`P_0 \equiv w\e_{12}`$.
    #[must_use]
    #[inline]
    pub fn weight() -> Self {
        Self::e12()
    }
    /// The multivector of point $`P \equiv P_0 + P_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP2 as Vee};
    ///
    /// let point = Vee::line().lhs() ^ Vee::line().rhs();
    ///
    /// assert_eq!(point.basis_blades(), Vee::point().basis_blades());
    /// format_eq!(point, [
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    ///     "+(-WÍyÍ+WÍyÍ)e20",
    ///     "+(+WÍxÍ-WÍxÍ)e01",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn point() -> Self {
        Self::weight() + Self::direction()
    }
    /// The multivector of rotator $`r \equiv s + P_0`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP2 as Vee};
    ///
    /// let rotator = Vee::displacement().lhs() * Vee::displacement().rhs();
    ///
    /// assert_eq!(rotator.basis_blades(), Vee::rotator().basis_blades());
    /// format_eq!(rotator, [
    ///     "+xÍxÍ+yÍyÍ",
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn rotator() -> Self {
        Self::scalar() + Self::weight()
    }
    /// The multivector of translator $`t \equiv s + P_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP2 as Vee};
    ///
    /// let translator = Vee::point().lhs() * Vee::point().rhs();
    ///
    /// assert_eq!(translator.basis_blades(), Vee::translator().basis_blades());
    /// format_eq!(translator, [
    ///     "-wÍwÍ",
    ///     "+(-YÍwÍ+YÍwÍ)e20",
    ///     "+(+XÍwÍ-XÍwÍ)e01",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn translator() -> Self {
        Self::scalar() + Self::direction()
    }
    /// The multivector of motor $`m \equiv s + P`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP2 as Vee};
    ///
    /// let motor = Vee::line().lhs() * Vee::line().rhs();
    ///
    /// assert_eq!(motor.basis_blades(), Vee::motor().basis_blades());
    /// format_eq!(motor, [
    ///     "+xÍxÍ+yÍyÍ",
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    ///     "+(-WÍyÍ+WÍyÍ)e20",
    ///     "+(+WÍxÍ-WÍxÍ)e01",
    /// ]);
    ///
    /// let point = Vee::point().pin() << Vee::motor();
    ///
    /// assert_eq!(point.basis_blades(), Vee::point().basis_blades());
    /// format_eq!(point, [
    ///     "+(+[+vv+ww]wÍ)e12",
    ///     "+(+[+2vw]YÍ+[+2Xw-2Yv]wÍ+[+vv-ww]XÍ)e20",
    ///     "+(+[+2Xv+2Yw]wÍ+[-2vw]XÍ+[+vv-ww]YÍ)e01",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn motor() -> Self {
        Self::scalar() + Self::point()
    }
    /// The multivector of flector $`f \equiv \ell + S`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP2 as Vee};
    ///
    /// let flector = Vee::line().lhs() * Vee::motor().rhs();
    ///
    /// assert_eq!(flector.basis_blades(), Vee::flector().basis_blades());
    /// format_eq!(flector, [
    ///     "+(+WÍvÍ+XÍyÍ-YÍxÍ)e0",
    ///     "+(+vÍxÍ-wÍyÍ)e1",
    ///     "+(+vÍyÍ+wÍxÍ)e2",
    ///     "+(+WÍwÍ+XÍxÍ+YÍyÍ)I",
    /// ]);
    ///
    /// let point = Vee::point().pin() << Vee::flector();
    ///
    /// assert_eq!(point.basis_blades(), Vee::point().basis_blades());
    /// format_eq!(point, [
    ///     "+(+[-xx-yy]wÍ)e12",
    ///     "+(+[+2xy]YÍ+[+2Vy+2Wx]wÍ+[+xx-yy]XÍ)e20",
    ///     "+(+[-2Vx+2Wy]wÍ+[+2xy]XÍ+[-xx+yy]YÍ)e01",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn flector() -> Self {
        Self::line() + Self::pseudoscalar()
    }
}

/// The named entities of the PGA with embedded dimension $`N = 3`$.
///
/// ```gdef
/// \gdef\e{
///   \boldsymbol e
/// }
/// \gdef\I{
///   \boldsymbol I
/// }
/// ```
impl<const M: i8> Multivector<Pga<M, 3>> {
    /// The multivector of scalar $`s \equiv v\e`$ where $`\e \equiv 1`$.
    #[must_use]
    #[inline]
    pub fn scalar() -> Self {
        Self::e()
    }
    /// The multivector of pseudoscalar $`S \equiv V\I`$ where $`\I \equiv \e_{0123}`$.
    #[must_use]
    #[inline]
    pub fn pseudoscalar() -> Self {
        Self::e0123()
    }
    /// The multivector of norm $`n \equiv s + S`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP3 as Vee};
    ///
    /// let squared_norm = Vee::line().squared_norm();
    ///
    /// assert_eq!(squared_norm.basis_blades(), Vee::norm().basis_blades());
    /// format_eq!(squared_norm, [
    ///     "+xx+yy+zz",
    ///     "+(-2Xx-2Yy-2Zz)I",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn norm() -> Self {
        Self::scalar() + Self::pseudoscalar()
    }
    /// The multivector of bias $`p_\infty \equiv W\e_0`$.
    #[must_use]
    #[inline]
    pub fn bias() -> Self {
        Self::e0()
    }
    /// The multivector of normal $`p_0 \equiv x\e_1 + y\e_2 + z\e_3`$.
    #[must_use]
    #[inline]
    pub fn normal() -> Self {
        Self::e1() + Self::e2() + Self::e3()
    }
    /// The multivector of plane $`p \equiv p_0 + p_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP3 as Vee};
    ///
    /// let plane = Vee::line().lhs() & Vee::point().rhs();
    ///
    /// assert_eq!(plane.basis_blades(), Vee::plane().basis_blades());
    /// format_eq!(plane, [
    ///     "+(-XÍXÍ-YÍYÍ-ZÍZÍ)e0",
    ///     "+(+XÍwÍ-YÍzÍ+ZÍyÍ)e1",
    ///     "+(+XÍzÍ+YÍwÍ-ZÍxÍ)e2",
    ///     "+(-XÍyÍ+YÍxÍ+ZÍwÍ)e3",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn plane() -> Self {
        Self::bias() + Self::normal()
    }
    /// The multivector of displacement $`\ell_0 \equiv x\e_{23} + y\e_{31} + z\e_{12}`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP3 as Vee};
    ///
    /// // A line through the origin as the join of a point and the origin.
    /// let displacement = Vee::point().lhs() & Vee::weight().rhs();
    ///
    /// assert_eq!(displacement.basis_blades(), Vee::displacement().basis_blades());
    /// format_eq!(displacement, [
    ///     "-XÍwÍe23",
    ///     "-YÍwÍe31",
    ///     "-ZÍwÍe12",
    /// ]);
    ///
    /// // A line through the origin as the meet of two planes through the origin.
    /// let displacement = Vee::normal().lhs() ^ Vee::normal().rhs();
    ///
    /// assert_eq!(displacement.basis_blades(), Vee::displacement().basis_blades());
    /// format_eq!(displacement, [
    ///     "+(+yÍzÍ-yÍzÍ)e23",
    ///     "+(-xÍzÍ+xÍzÍ)e31",
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn displacement() -> Self {
        Self::e23() + Self::e31() + Self::e12()
    }
    /// The multivector of moment $`\ell_\infty \equiv X\e_{01} + Y\e_{02} + Z\e_{03}`$.
    #[must_use]
    #[inline]
    pub fn moment() -> Self {
        Self::e01() + Self::e02() + Self::e03()
    }
    /// The multivector of line $`\ell \equiv \ell_0 + \ell_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP3 as Vee};
    ///
    /// // A line as the join of two points.
    /// let line = Vee::point().lhs() & Vee::point().rhs();
    ///
    /// assert_eq!(line.basis_blades(), Vee::line().basis_blades());
    /// format_eq!(line, [
    ///     "+(+YÍZÍ-YÍZÍ)e01",
    ///     "+(-XÍZÍ+XÍZÍ)e02",
    ///     "+(+XÍYÍ-XÍYÍ)e03",
    ///     "+(-XÍwÍ+XÍwÍ)e23",
    ///     "+(-YÍwÍ+YÍwÍ)e31",
    ///     "+(-ZÍwÍ+ZÍwÍ)e12",
    /// ]);
    ///
    /// // A line as the meet of two planes.
    /// let line = Vee::plane().lhs() ^ Vee::plane().rhs();
    ///
    /// assert_eq!(line.basis_blades(), Vee::line().basis_blades());
    /// format_eq!(line, [
    ///     "+(+WÍxÍ-WÍxÍ)e01",
    ///     "+(+WÍyÍ-WÍyÍ)e02",
    ///     "+(+WÍzÍ-WÍzÍ)e03",
    ///     "+(+yÍzÍ-yÍzÍ)e23",
    ///     "+(-xÍzÍ+xÍzÍ)e31",
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn line() -> Self {
        Self::displacement() + Self::moment()
    }
    /// The multivector of weight $`P_0 \equiv w\e_{123}`$.
    #[must_use]
    #[inline]
    pub fn weight() -> Self {
        Self::e123()
    }
    /// The multivector of direction $`P_\infty \equiv X\e_{032} + Y\e_{013} + Z\e_{021}`$.
    #[must_use]
    #[inline]
    pub fn direction() -> Self {
        Self::e032() + Self::e013() + Self::e021()
    }
    /// The multivector of point $`P \equiv P_0 + P_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP3 as Vee};
    ///
    /// // A point as the meet of a plane and a line.
    /// let point = Vee::plane().lhs() ^ Vee::line().rhs();
    ///
    /// assert_eq!(point.basis_blades(), Vee::point().basis_blades());
    /// format_eq!(point, [
    ///     "+(+xÍxÍ+yÍyÍ+zÍzÍ)e123",
    ///     "+(-WÍxÍ-YÍzÍ+ZÍyÍ)e032",
    ///     "+(-WÍyÍ+XÍzÍ-ZÍxÍ)e013",
    ///     "+(-WÍzÍ-XÍyÍ+YÍxÍ)e021",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn point() -> Self {
        Self::weight() + Self::direction()
    }
    /// The multivector of rotator $`r \equiv s + \ell_0`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP3 as Vee};
    ///
    /// let rotator = Vee::normal().lhs() * Vee::normal().rhs();
    ///
    /// assert_eq!(rotator.basis_blades(), Vee::rotator().basis_blades());
    /// format_eq!(rotator, [
    ///     "+xÍxÍ+yÍyÍ+zÍzÍ",
    ///     "+(+yÍzÍ-yÍzÍ)e23",
    ///     "+(-xÍzÍ+xÍzÍ)e31",
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    /// ]);
    ///
    /// let rotator = Vee::displacement().lhs() * Vee::displacement().rhs();
    ///
    /// assert_eq!(rotator.basis_blades(), Vee::rotator().basis_blades());
    /// format_eq!(rotator, [
    ///     "-xÍxÍ-yÍyÍ-zÍzÍ",
    ///     "+(-yÍzÍ+yÍzÍ)e23",
    ///     "+(+xÍzÍ-xÍzÍ)e31",
    ///     "+(-xÍyÍ+xÍyÍ)e12",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn rotator() -> Self {
        Self::scalar() + Self::displacement()
    }
    /// The multivector of translator $`t \equiv s + \ell_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP3 as Vee};
    ///
    /// let translator = Vee::point().lhs() * Vee::point().rhs();
    ///
    /// assert_eq!(translator.basis_blades(), Vee::translator().basis_blades());
    /// format_eq!(translator, [
    ///     "-wÍwÍ",
    ///     "+(+XÍwÍ-XÍwÍ)e01",
    ///     "+(+YÍwÍ-YÍwÍ)e02",
    ///     "+(+ZÍwÍ-ZÍwÍ)e03",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn translator() -> Self {
        Self::scalar() + Self::moment()
    }
    /// The multivector of simple motor $`m_s \equiv s + \ell`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP3 as Vee};
    ///
    /// let simple_motor = Vee::plane().lhs() * Vee::plane().rhs();
    ///
    /// assert_eq!(simple_motor.basis_blades(), Vee::simple_motor().basis_blades());
    /// format_eq!(simple_motor, [
    ///     "+xÍxÍ+yÍyÍ+zÍzÍ",
    ///     "+(+WÍxÍ-WÍxÍ)e01",
    ///     "+(+WÍyÍ-WÍyÍ)e02",
    ///     "+(+WÍzÍ-WÍzÍ)e03",
    ///     "+(+yÍzÍ-yÍzÍ)e23",
    ///     "+(-xÍzÍ+xÍzÍ)e31",
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn simple_motor() -> Self {
        Self::scalar() + Self::line()
    }
    /// The multivector of motor $`m \equiv s + \ell + S`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP3 as Vee};
    ///
    /// let motor = Vee::line().lhs() * Vee::line().rhs();
    ///
    /// assert_eq!(motor.basis_blades(), Vee::motor().basis_blades());
    /// format_eq!(motor, [
    ///     "-xÍxÍ-yÍyÍ-zÍzÍ",
    ///     "+(-YÍzÍ+YÍzÍ+ZÍyÍ-ZÍyÍ)e01",
    ///     "+(+XÍzÍ-XÍzÍ-ZÍxÍ+ZÍxÍ)e02",
    ///     "+(-XÍyÍ+XÍyÍ+YÍxÍ-YÍxÍ)e03",
    ///     "+(-yÍzÍ+yÍzÍ)e23",
    ///     "+(+xÍzÍ-xÍzÍ)e31",
    ///     "+(-xÍyÍ+xÍyÍ)e12",
    ///     "+(+XÍxÍ+XÍxÍ+YÍyÍ+YÍyÍ+ZÍzÍ+ZÍzÍ)I",
    /// ]);
    ///
    /// let motor = Vee::rotator().lhs() * Vee::translator().rhs();
    ///
    /// assert_eq!(motor.basis_blades(), Vee::motor().basis_blades());
    /// format_eq!(motor, [
    ///     "+vÍvÍ",
    ///     "+(+XÍvÍ+YÍzÍ-ZÍyÍ)e01",
    ///     "+(-XÍzÍ+YÍvÍ+ZÍxÍ)e02",
    ///     "+(+XÍyÍ-YÍxÍ+ZÍvÍ)e03",
    ///     "+vÍxÍe23",
    ///     "+vÍyÍe31",
    ///     "+vÍzÍe12",
    ///     "+(+XÍxÍ+YÍyÍ+ZÍzÍ)I",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn motor() -> Self {
        Self::norm() + Self::line()
    }
    /// The multivector of rotoreflector $`f_r \equiv p_0 + P_0`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP3 as Vee};
    ///
    /// let rotoreflector = Vee::normal().lhs() * Vee::rotator().rhs();
    ///
    /// assert_eq!(rotoreflector.basis_blades(), Vee::rotoreflector().basis_blades());
    /// format_eq!(rotoreflector, [
    ///     "+(+vÍxÍ-yÍzÍ+yÍzÍ)e1",
    ///     "+(+vÍyÍ+xÍzÍ-xÍzÍ)e2",
    ///     "+(+vÍzÍ-xÍyÍ+xÍyÍ)e3",
    ///     "+(+xÍxÍ+yÍyÍ+zÍzÍ)e123",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn rotoreflector() -> Self {
        Self::normal() + Self::weight()
    }
    /// The multivector of transflector $`f_t \equiv p + P_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP3 as Vee};
    ///
    /// let transflector = Vee::normal().lhs() * Vee::translator().rhs();
    ///
    /// assert_eq!(transflector.basis_blades(), Vee::transflector().basis_blades());
    /// format_eq!(transflector, [
    ///     "+(-XÍxÍ-YÍyÍ-ZÍzÍ)e0",
    ///     "+vÍxÍe1",
    ///     "+vÍyÍe2",
    ///     "+vÍzÍe3",
    ///     "+(-YÍzÍ+ZÍyÍ)e032",
    ///     "+(+XÍzÍ-ZÍxÍ)e013",
    ///     "+(-XÍyÍ+YÍxÍ)e021",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn transflector() -> Self {
        Self::plane() + Self::direction()
    }
    /// The multivector of flector $`f \equiv p + P`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP3 as Vee};
    ///
    /// let flector = Vee::plane().lhs() * Vee::motor().rhs();
    ///
    /// assert_eq!(flector.basis_blades(), Vee::flector().basis_blades());
    /// format_eq!(flector, [
    ///     "+(+WÍvÍ-XÍxÍ-YÍyÍ-ZÍzÍ)e0",
    ///     "+(+vÍxÍ-yÍzÍ+yÍzÍ)e1",
    ///     "+(+vÍyÍ+xÍzÍ-xÍzÍ)e2",
    ///     "+(+vÍzÍ-xÍyÍ+xÍyÍ)e3",
    ///     "+(+xÍxÍ+yÍyÍ+zÍzÍ)e123",
    ///     "+(+VÍxÍ-WÍxÍ-YÍzÍ+ZÍyÍ)e032",
    ///     "+(+VÍyÍ-WÍyÍ+XÍzÍ-ZÍxÍ)e013",
    ///     "+(+VÍzÍ-WÍzÍ-XÍyÍ+YÍxÍ)e021",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn flector() -> Self {
        Self::plane() + Self::point()
    }
}

/// The named entities of the PGA with embedded dimension $`N = 4`$ (experimental).
///
/// ```gdef
/// \gdef\e{
///   \boldsymbol e
/// }
/// \gdef\I{
///   \boldsymbol I
/// }
/// ```
impl<const M: i8> Multivector<Pga<M, 4>> {
    /// The multivector of scalar $`s \equiv v\e`$ where $`\e \equiv 1`$.
    #[must_use]
    #[inline]
    pub fn scalar() -> Self {
        Self::e()
    }
    /// The multivector of pseudoscalar $`S \equiv V\I`$ where $`\I \equiv \e_{01234}`$.
    #[must_use]
    #[inline]
    pub fn pseudoscalar() -> Self {
        Self::e01234()
    }
    /// The multivector of norm $`n \equiv s + P`$.
    ///
    /// Quadvector $`P`$ does square to a scalar, therefore $`n`$ is a Study number.
    ///
    /// ```
    /// use vee::{format_eq, PgaP4 as Vee};
    ///
    /// let quadvector_squared_norm = Vee::point().squared_norm();
    ///
    /// format_eq!(quadvector_squared_norm, "ww");
    /// ```
    #[must_use]
    #[inline]
    pub fn norm() -> Self {
        Self::scalar() + Self::point()
    }
    /// The multivector of bias $`v_\infty \equiv w\e_0`$.
    #[must_use]
    #[inline]
    pub fn bias() -> Self {
        Self::e0()
    }
    /// The multivector of normal $`v_0 \equiv x\e_1 + y\e_2 + z\e_3 + Ã°\e_4`$.
    #[must_use]
    #[inline]
    pub fn normal() -> Self {
        Self::e1() + Self::e2() + Self::e3() + Self::e4()
    }
    /// The multivector of volume $`v \equiv v_0 + v_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume() -> Self {
        Self::bias() + Self::normal()
    }
    /// The multivector of plane displacement
    /// $`p_0 \equiv a\e_{23} + b\e_{31} + c\e_{12} + d\e_{41} + e\e_{42} + f\e_{43}`$.
    #[must_use]
    #[inline]
    pub fn plane_displacement() -> Self {
        Self::e23() + Self::e31() + Self::e12() + Self::e41() + Self::e42() + Self::e43()
    }
    /// The multivector of plane moment
    /// $`p_\infty \equiv X\e_{01} + Y\e_{02} + Z\e_{03} + Ã\e_{40}`$.
    #[must_use]
    #[inline]
    pub fn plane_moment() -> Self {
        Self::e01() + Self::e02() + Self::e03() + Self::e40()
    }
    /// The multivector of plane $`p \equiv p_0 + p_\infty`$.
    #[must_use]
    #[inline]
    pub fn plane() -> Self {
        Self::plane_displacement() + Self::plane_moment()
    }
    /// The multivector of line displacement
    /// $`\ell_0 \equiv x\e_{234} + y\e_{314} + z\e_{124} + Ã°\e_{123}`$.
    #[must_use]
    #[inline]
    pub fn line_displacement() -> Self {
        Self::e234() + Self::e314() + Self::e124() + Self::e123()
    }
    /// The multivector of line moment.
    ///
    /// ```math
    /// \ell_\infty \equiv A\e_{014} + B\e_{024} + C\e_{034} + D\e_{032} + E\e_{013} + F\e_{021}
    /// ```
    #[must_use]
    #[inline]
    pub fn line_moment() -> Self {
        Self::e014() + Self::e024() + Self::e034() + Self::e032() + Self::e013() + Self::e021()
    }
    /// The multivector of line $`\ell \equiv \ell_0 + \ell_\infty`$.
    #[must_use]
    #[inline]
    pub fn line() -> Self {
        Self::line_displacement() + Self::line_moment()
    }
    /// The multivector of weight $`P_0 \equiv W\e_{1234}`$.
    #[must_use]
    #[inline]
    pub fn weight() -> Self {
        Self::e1234()
    }
    /// The multivector of direction
    /// $`P_\infty \equiv X\e_{0324} + Y\e_{0134} + Z\e_{0214} + Ã\e_{0123}`$.
    #[must_use]
    #[inline]
    pub fn direction() -> Self {
        Self::e0324() + Self::e0134() + Self::e0214() + Self::e0123()
    }
    /// The multivector of point $`P \equiv P_0 + P_\infty`$.
    #[must_use]
    #[inline]
    pub fn point() -> Self {
        Self::weight() + Self::direction()
    }
    /// The multivector of single rotator $`r_1 \equiv s + \ell_0`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP4 as Vee};
    ///
    /// let single_rotator = Vee::normal().lhs() * Vee::normal().rhs();
    ///
    /// assert_eq!(single_rotator.basis_blades(), Vee::single_rotator().basis_blades());
    /// format_eq!(single_rotator, [
    ///     "+xÍxÍ+yÍyÍ+zÍzÍ+Ã°ÍÃ°Í",
    ///     "+(+yÍzÍ-yÍzÍ)e23",
    ///     "+(-xÍzÍ+xÍzÍ)e31",
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    ///     "+(-xÍÃ°Í+xÍÃ°Í)e41",
    ///     "+(-yÍÃ°Í+yÍÃ°Í)e42",
    ///     "+(-zÍÃ°Í+zÍÃ°Í)e43",
    /// ]);
    ///
    /// let single_rotator = Vee::line_displacement().lhs() * Vee::line_displacement().rhs();
    ///
    /// assert_eq!(single_rotator.basis_blades(), Vee::single_rotator().basis_blades());
    /// format_eq!(single_rotator, [
    ///     "-xÍxÍ-yÍyÍ-zÍzÍ-Ã°ÍÃ°Í",
    ///     "+(-yÍzÍ+yÍzÍ)e23",
    ///     "+(+xÍzÍ-xÍzÍ)e31",
    ///     "+(-xÍyÍ+xÍyÍ)e12",
    ///     "+(-xÍÃ°Í+xÍÃ°Í)e41",
    ///     "+(-yÍÃ°Í+yÍÃ°Í)e42",
    ///     "+(-zÍÃ°Í+zÍÃ°Í)e43",
    /// ]);
    ///
    /// let squared_norm = Vee::single_rotator().squared_norm();
    /// assert_eq!(squared_norm.basis_blades(), (Vee::scalar() + Vee::weight()).basis_blades());
    /// format_eq!(squared_norm, [
    ///     "+aa+bb+cc+dd+ee+ff+vv",
    ///     "+(+2ad+2be+2cf)e1234",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn single_rotator() -> Self {
        Self::scalar() + Self::plane_displacement()
    }
    /// The multivector of double rotator $`r_2 \equiv s + \ell_0 + P_0`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP4 as Vee};
    ///
    /// let double_rotator = Vee::single_rotator().lhs() * Vee::single_rotator().rhs();
    ///
    /// assert_eq!(double_rotator.basis_blades(), Vee::double_rotator().basis_blades());
    /// format_eq!(double_rotator, [
    ///     "-aÍaÍ-bÍbÍ-cÍcÍ-dÍdÍ-eÍeÍ-fÍfÍ+vÍvÍ",
    ///     "+(+aÍvÍ+aÍvÍ-bÍcÍ+bÍcÍ-eÍfÍ+eÍfÍ)e23",
    ///     "+(+aÍcÍ-aÍcÍ+bÍvÍ+bÍvÍ+dÍfÍ-dÍfÍ)e31",
    ///     "+(-aÍbÍ+aÍbÍ+cÍvÍ+cÍvÍ-dÍeÍ+dÍeÍ)e12",
    ///     "+(-bÍfÍ+bÍfÍ+cÍeÍ-cÍeÍ+dÍvÍ+dÍvÍ)e41",
    ///     "+(+aÍfÍ-aÍfÍ-cÍdÍ+cÍdÍ+eÍvÍ+eÍvÍ)e42",
    ///     "+(-aÍeÍ+aÍeÍ+bÍdÍ-bÍdÍ+fÍvÍ+fÍvÍ)e43",
    ///     "+(-aÍdÍ-aÍdÍ-bÍeÍ-bÍeÍ-cÍfÍ-cÍfÍ)e1234",
    /// ]);
    ///
    /// let double_rotator = Vee::plane_displacement().lhs() * Vee::plane_displacement().rhs();
    ///
    /// assert_eq!(double_rotator.basis_blades(), Vee::double_rotator().basis_blades());
    /// format_eq!(double_rotator, [
    ///     "-aÍaÍ-bÍbÍ-cÍcÍ-dÍdÍ-eÍeÍ-fÍfÍ",
    ///     "+(-bÍcÍ+bÍcÍ-eÍfÍ+eÍfÍ)e23",
    ///     "+(+aÍcÍ-aÍcÍ+dÍfÍ-dÍfÍ)e31",
    ///     "+(-aÍbÍ+aÍbÍ-dÍeÍ+dÍeÍ)e12",
    ///     "+(-bÍfÍ+bÍfÍ+cÍeÍ-cÍeÍ)e41",
    ///     "+(+aÍfÍ-aÍfÍ-cÍdÍ+cÍdÍ)e42",
    ///     "+(-aÍeÍ+aÍeÍ+bÍdÍ-bÍdÍ)e43",
    ///     "+(-aÍdÍ-aÍdÍ-bÍeÍ-bÍeÍ-cÍfÍ-cÍfÍ)e1234",
    /// ]);
    ///
    /// let squared_norm = Vee::double_rotator().squared_norm();
    /// assert_eq!(squared_norm.basis_blades(), (Vee::scalar() + Vee::weight()).basis_blades());
    /// format_eq!(squared_norm, [
    ///     "+aa+bb+cc+dd+ee+ff+vv+ww",
    ///     "+(+2ad+2be+2cf+2vw)e1234",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn double_rotator() -> Self {
        Self::scalar() + Self::plane_displacement() + Self::weight()
    }
    /// The multivector of translator $`t \equiv s + p_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP4 as Vee};
    ///
    /// let translator = Vee::point().lhs() * Vee::point().rhs();
    ///
    /// assert_eq!(translator.basis_blades(), Vee::translator().basis_blades());
    /// format_eq!(translator, [
    ///     "+wÍwÍ",
    ///     "+(-XÍwÍ+XÍwÍ)e01",
    ///     "+(-YÍwÍ+YÍwÍ)e02",
    ///     "+(-ZÍwÍ+ZÍwÍ)e03",
    ///     "+(-wÍÃÍ+wÍÃÍ)e40",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn translator() -> Self {
        Self::scalar() + Self::plane_moment()
    }
    /// The multivector of simple motor $`m_s \equiv s + p`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP4 as Vee};
    ///
    /// let simple_motor = Vee::volume().lhs() * Vee::volume().rhs();
    ///
    /// assert_eq!(simple_motor.basis_blades(), Vee::simple_motor().basis_blades());
    /// format_eq!(simple_motor, [
    ///     "+xÍxÍ+yÍyÍ+zÍzÍ+Ã°ÍÃ°Í",
    ///     "+(+WÍxÍ-WÍxÍ)e01",
    ///     "+(+WÍyÍ-WÍyÍ)e02",
    ///     "+(+WÍzÍ-WÍzÍ)e03",
    ///     "+(-WÍÃ°Í+WÍÃ°Í)e40",
    ///     "+(+yÍzÍ-yÍzÍ)e23",
    ///     "+(-xÍzÍ+xÍzÍ)e31",
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    ///     "+(-xÍÃ°Í+xÍÃ°Í)e41",
    ///     "+(-yÍÃ°Í+yÍÃ°Í)e42",
    ///     "+(-zÍÃ°Í+zÍÃ°Í)e43",
    /// ]);
    ///
    /// let squared_norm = Vee::simple_motor().squared_norm();
    /// assert_eq!(squared_norm.basis_blades(), Vee::norm().basis_blades());
    /// format_eq!(squared_norm, [
    ///     // Scalar condition.
    ///     "+aa+bb+cc+dd+ee+ff+vv",
    ///     // Point condition.
    ///     "+(+2ad+2be+2cf)e1234", // Weight condition.
    ///     "+(-2Yf+2Ze-2aÃ)e0324", // Direction condition.
    ///     "+(+2Xf-2Zd-2bÃ)e0134", // Direction condition.
    ///     "+(-2Xe+2Yd-2cÃ)e0214", // Direction condition.
    ///     "+(-2Xa-2Yb-2Zc)e0123", // Direction condition.
    /// ]);
    ///
    /// let point = Vee::point().pin() << Vee::simple_motor();
    ///
    /// assert_eq!(point.basis_blades(), (Vee::scalar() + Vee::point()).basis_blades());
    /// format_eq!(point, [
    ///     "+[+2ad+2be+2cf]wÍ", // Vanishes with weight condition.
    ///     "+(+[+aa+bb+cc+dd+ee+ff+vv]wÍ)e1234",
    ///     "+(+[+2ac-2bv-2df]ZÍ+[-2Xv-2Yc+2Zb-2dÃ]wÍ+[+2bf-2ce-2dv]ÃÍ\
    ///        +[+aa-bb-cc-dd+ee+ff+vv]XÍ+[+2ab+2cv-2de]YÍ)e0324",
    ///     "+(+[+2Xc-2Yv-2Za-2eÃ]wÍ+[-2af+2cd-2ev]ÃÍ+[+2ab-2cv-2de]XÍ\
    ///        +[-aa+bb-cc+dd-ee+ff+vv]YÍ+[+2av+2bc-2ef]ZÍ)e0134",
    ///     "+(+[+2ae-2bd-2fv]ÃÍ+[+2ac+2bv-2df]XÍ+[-2av+2bc-2ef]YÍ\
    ///        +[-aa-bb+cc+dd+ee-ff+vv]ZÍ+[-2Xb+2Ya-2Zv-2fÃ]wÍ)e0214",
    ///     "+(+[+2bf-2ce+2dv]XÍ+[-2af+2cd+2ev]YÍ+[+2ae-2bd+2fv]ZÍ\
    ///        +[-2Xd-2Ye-2Zf+2vÃ]wÍ+[+aa+bb+cc-dd-ee-ff+vv]ÃÍ)e0123",
    /// ]);
    ///
    /// let line = Vee::line().pin() << Vee::simple_motor();
    /// assert_eq!(line.basis_blades(), Vee::line().basis_blades());
    /// let plane = Vee::plane().pin() << Vee::simple_motor();
    /// assert_eq!(plane.basis_blades(), Vee::plane().basis_blades());
    ///
    /// let volume = Vee::volume().pin() << Vee::simple_motor();
    ///
    /// assert_eq!(volume.basis_blades(), (Vee::pseudoscalar() + Vee::volume()).basis_blades());
    /// format_eq!(volume, [
    ///     "+(+[+aa+bb+cc+dd+ee+ff+vv]WÍ\
    ///        +[+2Xv-2Yc+2Zb-2dÃ]xÍ+[+2Xc+2Yv-2Za-2eÃ]yÍ+[-2Xb+2Ya+2Zv-2fÃ]zÍ+[-2Xd-2Ye-2Zf-2vÃ]Ã°Í)e0",
    ///     "+(+[+2ab+2cv-2de]yÍ+[+2ac-2bv-2df]zÍ+[+2bf-2ce-2dv]Ã°Í+[+aa-bb-cc-dd+ee+ff+vv]xÍ)e1",
    ///     "+(+[+2av+2bc-2ef]zÍ+[-2af+2cd-2ev]Ã°Í+[+2ab-2cv-2de]xÍ+[-aa+bb-cc+dd-ee+ff+vv]yÍ)e2",
    ///     "+(+[+2ae-2bd-2fv]Ã°Í+[+2ac+2bv-2df]xÍ+[-2av+2bc-2ef]yÍ+[-aa-bb+cc+dd+ee-ff+vv]zÍ)e3",
    ///     "+(+[+2bf-2ce+2dv]xÍ+[-2af+2cd+2ev]yÍ+[+2ae-2bd+2fv]zÍ+[+aa+bb+cc-dd-ee-ff+vv]Ã°Í)e4",
    ///     // Vanishes with point condition.
    ///     "+(+[+2ad+2be+2cf]WÍ+[-2Yf+2Ze-2aÃ]xÍ+[+2Xf-2Zd-2bÃ]yÍ+[-2Xe+2Yd-2cÃ]zÍ+[-2Xa-2Yb-2Zc]Ã°Í)I",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn simple_motor() -> Self {
        Self::scalar() + Self::plane()
    }
    /// The multivector of single motor $`m_1 \equiv s + p + P_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP4 as Vee};
    ///
    /// let single_motor = Vee::single_rotator().lhs() * Vee::translator().rhs();
    ///
    /// assert_eq!(single_motor.basis_blades(), Vee::single_motor().basis_blades());
    /// format_eq!(single_motor, [
    ///     "+vÍvÍ",
    ///     "+(+XÍvÍ+YÍcÍ-ZÍbÍ+dÍÃÍ)e01",
    ///     "+(-XÍcÍ+YÍvÍ+ZÍaÍ+eÍÃÍ)e02",
    ///     "+(+XÍbÍ-YÍaÍ+ZÍvÍ+fÍÃÍ)e03",
    ///     "+(-XÍdÍ-YÍeÍ-ZÍfÍ+vÍÃÍ)e40",
    ///     "+aÍvÍe23",
    ///     "+bÍvÍe31",
    ///     "+cÍvÍe12",
    ///     "+dÍvÍe41",
    ///     "+eÍvÍe42",
    ///     "+fÍvÍe43",
    ///     "+(+YÍfÍ-ZÍeÍ+aÍÃÍ)e0324",
    ///     "+(-XÍfÍ+ZÍdÍ+bÍÃÍ)e0134",
    ///     "+(+XÍeÍ-YÍdÍ+cÍÃÍ)e0214",
    ///     "+(+XÍaÍ+YÍbÍ+ZÍcÍ)e0123",
    /// ]);
    ///
    /// let single_motor = Vee::line().lhs() * Vee::line().rhs();
    ///
    /// assert_eq!(single_motor.basis_blades(), Vee::single_motor().basis_blades());
    /// format_eq!(single_motor, [
    ///     "-xÍxÍ-yÍyÍ-zÍzÍ-Ã°ÍÃ°Í",
    ///     "+(-BÍzÍ+BÍzÍ+CÍyÍ-CÍyÍ+DÍÃ°Í-DÍÃ°Í)e01",
    ///     "+(+AÍzÍ-AÍzÍ-CÍxÍ+CÍxÍ+EÍÃ°Í-EÍÃ°Í)e02",
    ///     "+(-AÍyÍ+AÍyÍ+BÍxÍ-BÍxÍ+FÍÃ°Í-FÍÃ°Í)e03",
    ///     "+(-DÍxÍ+DÍxÍ-EÍyÍ+EÍyÍ-FÍzÍ+FÍzÍ)e40",
    ///     "+(-yÍzÍ+yÍzÍ)e23",
    ///     "+(+xÍzÍ-xÍzÍ)e31",
    ///     "+(-xÍyÍ+xÍyÍ)e12",
    ///     "+(-xÍÃ°Í+xÍÃ°Í)e41",
    ///     "+(-yÍÃ°Í+yÍÃ°Í)e42",
    ///     "+(-zÍÃ°Í+zÍÃ°Í)e43",
    ///     "+(+AÍÃ°Í+AÍÃ°Í-EÍzÍ-EÍzÍ+FÍyÍ+FÍyÍ)e0324",
    ///     "+(+BÍÃ°Í+BÍÃ°Í+DÍzÍ+DÍzÍ-FÍxÍ-FÍxÍ)e0134",
    ///     "+(+CÍÃ°Í+CÍÃ°Í-DÍyÍ-DÍyÍ+EÍxÍ+EÍxÍ)e0214",
    ///     "+(+AÍxÍ+AÍxÍ+BÍyÍ+BÍyÍ+CÍzÍ+CÍzÍ)e0123",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn single_motor() -> Self {
        Self::scalar() + Self::plane() + Self::direction()
    }
    /// The multivector of double motor $`m_2 \equiv s + p + P`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP4 as Vee};
    ///
    /// let double_motor = Vee::double_rotator().lhs() * Vee::translator().rhs();
    ///
    /// assert_eq!(double_motor.basis_blades(), Vee::double_motor().basis_blades());
    /// format_eq!(double_motor, [
    ///     "+vÍvÍ",
    ///     "+(+XÍvÍ+YÍcÍ-ZÍbÍ+dÍÃÍ)e01",
    ///     "+(-XÍcÍ+YÍvÍ+ZÍaÍ+eÍÃÍ)e02",
    ///     "+(+XÍbÍ-YÍaÍ+ZÍvÍ+fÍÃÍ)e03",
    ///     "+(-XÍdÍ-YÍeÍ-ZÍfÍ+vÍÃÍ)e40",
    ///     "+aÍvÍe23",
    ///     "+bÍvÍe31",
    ///     "+cÍvÍe12",
    ///     "+dÍvÍe41",
    ///     "+eÍvÍe42",
    ///     "+fÍvÍe43",
    ///     "+vÍwÍe1234",
    ///     "+(+XÍwÍ+YÍfÍ-ZÍeÍ+aÍÃÍ)e0324",
    ///     "+(-XÍfÍ+YÍwÍ+ZÍdÍ+bÍÃÍ)e0134",
    ///     "+(+XÍeÍ-YÍdÍ+ZÍwÍ+cÍÃÍ)e0214",
    ///     "+(+XÍaÍ+YÍbÍ+ZÍcÍ-wÍÃÍ)e0123",
    /// ]);
    ///
    /// let double_motor = Vee::plane().lhs() * Vee::plane().rhs();
    ///
    /// assert_eq!(double_motor.basis_blades(), Vee::double_motor().basis_blades());
    /// format_eq!(double_motor, [
    ///     "-aÍaÍ-bÍbÍ-cÍcÍ-dÍdÍ-eÍeÍ-fÍfÍ",
    ///     "+(-YÍcÍ+YÍcÍ+ZÍbÍ-ZÍbÍ+dÍÃÍ-dÍÃÍ)e01",
    ///     "+(+XÍcÍ-XÍcÍ-ZÍaÍ+ZÍaÍ+eÍÃÍ-eÍÃÍ)e02",
    ///     "+(-XÍbÍ+XÍbÍ+YÍaÍ-YÍaÍ+fÍÃÍ-fÍÃÍ)e03",
    ///     "+(+XÍdÍ-XÍdÍ+YÍeÍ-YÍeÍ+ZÍfÍ-ZÍfÍ)e40",
    ///     "+(-bÍcÍ+bÍcÍ-eÍfÍ+eÍfÍ)e23",
    ///     "+(+aÍcÍ-aÍcÍ+dÍfÍ-dÍfÍ)e31",
    ///     "+(-aÍbÍ+aÍbÍ-dÍeÍ+dÍeÍ)e12",
    ///     "+(-bÍfÍ+bÍfÍ+cÍeÍ-cÍeÍ)e41",
    ///     "+(+aÍfÍ-aÍfÍ-cÍdÍ+cÍdÍ)e42",
    ///     "+(-aÍeÍ+aÍeÍ+bÍdÍ-bÍdÍ)e43",
    ///     "+(-aÍdÍ-aÍdÍ-bÍeÍ-bÍeÍ-cÍfÍ-cÍfÍ)e1234",
    ///     "+(+YÍfÍ+YÍfÍ-ZÍeÍ-ZÍeÍ+aÍÃÍ+aÍÃÍ)e0324",
    ///     "+(-XÍfÍ-XÍfÍ+ZÍdÍ+ZÍdÍ+bÍÃÍ+bÍÃÍ)e0134",
    ///     "+(+XÍeÍ+XÍeÍ-YÍdÍ-YÍdÍ+cÍÃÍ+cÍÃÍ)e0214",
    ///     "+(+XÍaÍ+XÍaÍ+YÍbÍ+YÍbÍ+ZÍcÍ+ZÍcÍ)e0123",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn double_motor() -> Self {
        Self::scalar() + Self::plane() + Self::point()
    }
    /// The multivector of rotoreflector $`f_r \equiv v_0 + \ell_0`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP4 as Vee};
    ///
    /// let rotoreflector = Vee::normal().lhs() * Vee::single_rotator().rhs();
    ///
    /// assert_eq!(rotoreflector.basis_blades(), Vee::rotoreflector().basis_blades());
    /// format_eq!(rotoreflector, [
    ///     "+(+bÍzÍ-cÍyÍ+dÍÃ°Í+vÍxÍ)e1",
    ///     "+(-aÍzÍ+cÍxÍ+eÍÃ°Í+vÍyÍ)e2",
    ///     "+(+aÍyÍ-bÍxÍ+fÍÃ°Í+vÍzÍ)e3",
    ///     "+(-dÍxÍ-eÍyÍ-fÍzÍ+vÍÃ°Í)e4",
    ///     "+(+aÍÃ°Í+eÍzÍ-fÍyÍ)e234",
    ///     "+(+bÍÃ°Í-dÍzÍ+fÍxÍ)e314",
    ///     "+(+cÍÃ°Í+dÍyÍ-eÍxÍ)e124",
    ///     "+(+aÍxÍ+bÍyÍ+cÍzÍ)e123",
    /// ]);
    ///
    /// let squared_norm = Vee::rotoreflector().squared_norm();
    /// assert_eq!(squared_norm.basis_blades(), (Vee::scalar() + Vee::weight()).basis_blades());
    /// format_eq!(squared_norm, [
    ///     "+2xx+2yy+2zz+2Ã°Ã°",
    ///     "+(-2xx-2yy-2zz+2Ã°Ã°)e1234", // Weight condition.
    /// ]);
    ///
    /// let point = Vee::point().pin() << Vee::rotoreflector();
    ///
    /// assert_eq!(point.basis_blades(), (Vee::scalar() + Vee::point()).basis_blades());
    /// format_eq!(point, [
    ///     "+[+2xx+2yy+2zz-2Ã°Ã°]wÍ", // Vanishes with weight condition.
    ///     "+(+[-2xx-2yy-2zz-2Ã°Ã°]wÍ)e1234",
    ///     "+(+[+4xÃ°]ÃÍ+[-4zÃ°]YÍ+[+4yÃ°]ZÍ)e0324",
    ///     "+(+[+4zÃ°]XÍ+[-4xÃ°]ZÍ+[+4yÃ°]ÃÍ)e0134",
    ///     "+(+[+4xÃ°]YÍ+[+4zÃ°]ÃÍ+[-4yÃ°]XÍ)e0214",
    ///     "+(+[+4zÃ°]ZÍ+[+4xÃ°]XÍ+[+4yÃ°]YÍ)e0123",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn rotoreflector() -> Self {
        Self::normal() + Self::line_displacement()
    }
    /// The multivector of transflector $`f_t \equiv v + P_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP4 as Vee};
    ///
    /// let transflector = Vee::normal().lhs() * Vee::translator().rhs();
    ///
    /// assert_eq!(transflector.basis_blades(), Vee::transflector().basis_blades());
    /// format_eq!(transflector, [
    ///     "+(-XÍxÍ-YÍyÍ-ZÍzÍ+ÃÍÃ°Í)e0",
    ///     "+vÍxÍe1",
    ///     "+vÍyÍe2",
    ///     "+vÍzÍe3",
    ///     "+vÍÃ°Íe4",
    ///     "+(+XÍÃ°Í+xÍÃÍ)e014",
    ///     "+(+YÍÃ°Í+yÍÃÍ)e024",
    ///     "+(+ZÍÃ°Í+zÍÃÍ)e034",
    ///     "+(-YÍzÍ+ZÍyÍ)e032",
    ///     "+(+XÍzÍ-ZÍxÍ)e013",
    ///     "+(-XÍyÍ+YÍxÍ)e021",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn transflector() -> Self {
        Self::volume() + Self::line_moment()
    }
    /// The multivector of flector $`f \equiv v + \ell + S`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP4 as Vee};
    ///
    /// let flector = Vee::volume().lhs() * Vee::single_motor().rhs();
    ///
    /// assert_eq!(flector.basis_blades(), Vee::flector().basis_blades());
    /// format_eq!(flector, [
    ///     "+(+WÍvÍ-XÍxÍ-YÍyÍ-ZÍzÍ+ÃÍÃ°Í)e0",
    ///     "+(+bÍzÍ-cÍyÍ+dÍÃ°Í+vÍxÍ)e1",
    ///     "+(-aÍzÍ+cÍxÍ+eÍÃ°Í+vÍyÍ)e2",
    ///     "+(+aÍyÍ-bÍxÍ+fÍÃ°Í+vÍzÍ)e3",
    ///     "+(-dÍxÍ-eÍyÍ-fÍzÍ+vÍÃ°Í)e4",
    ///     "+(+aÍÃ°Í+eÍzÍ-fÍyÍ)e234",
    ///     "+(+bÍÃ°Í-dÍzÍ+fÍxÍ)e314",
    ///     "+(+cÍÃ°Í+dÍyÍ-eÍxÍ)e124",
    ///     "+(+aÍxÍ+bÍyÍ+cÍzÍ)e123",
    ///     "+(-WÍdÍ+XÍÃ°Í+YÍzÍ-ZÍyÍ+xÍÃÍ)e014",
    ///     "+(-WÍeÍ-XÍzÍ+YÍÃ°Í+ZÍxÍ+yÍÃÍ)e024",
    ///     "+(-WÍfÍ+XÍyÍ-YÍxÍ+ZÍÃ°Í+zÍÃÍ)e034",
    ///     "+(-WÍaÍ-XÍÃ°Í-YÍzÍ+ZÍyÍ+xÍÃÍ)e032",
    ///     "+(-WÍbÍ+XÍzÍ-YÍÃ°Í-ZÍxÍ+yÍÃÍ)e013",
    ///     "+(-WÍcÍ-XÍyÍ+YÍxÍ-ZÍÃ°Í+zÍÃÍ)e021",
    ///     "+(+XÍxÍ+YÍyÍ+ZÍzÍ+ÃÍÃ°Í)I",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn flector() -> Self {
        Self::volume() + Self::line() + Self::pseudoscalar()
    }
}

/// The named entities of the PGA with embedded dimension $`N = 5`$ (experimental, no inverse).
///
/// ```gdef
/// \gdef\e{
///   \boldsymbol e
/// }
/// \gdef\I{
///   \boldsymbol I
/// }
/// ```
impl<const M: i8> Multivector<Pga<M, 5>> {
    /// The multivector of scalar $`s \equiv v\e`$ where $`\e \equiv 1`$.
    #[must_use]
    #[inline]
    pub fn scalar() -> Self {
        Self::e()
    }
    /// The multivector of pseudoscalar $`S \equiv V\I`$ where $`\I \equiv \e_{012345}`$.
    #[must_use]
    #[inline]
    pub fn pseudoscalar() -> Self {
        Self::e012345()
    }
    /// The multivector of norm $`n \equiv s + \ell`$.
    ///
    /// Quadvector $`\ell`$ does not square to a scalar, therefore $`n`$ is **not** a Study number.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let quadvector_squared_norm = Vee::line().squared_norm();
    ///
    /// assert_eq!(quadvector_squared_norm.basis_blades(),
    ///     (Vee::scalar() + Vee::line_moment()).basis_blades());
    /// format_eq!(quadvector_squared_norm, [
    ///     "+xx+yy+zz+Ã°Ã°+Ã¸Ã¸",
    ///     "+(+2DÃ¸-2GÃ°-2Jx)e0145",
    ///     "+(+2EÃ¸-2HÃ°-2Jy)e0245",
    ///     "+(+2FÃ¸-2IÃ°-2Jz)e0345",
    ///     "+(+2AÃ¸-2Hz+2Iy)e0325",
    ///     "+(+2BÃ¸+2Gz-2Ix)e0135",
    ///     "+(+2CÃ¸-2Gy+2Hx)e0215",
    ///     "+(-2AÃ°+2Ez-2Fy)e0324",
    ///     "+(-2BÃ°-2Dz+2Fx)e0134",
    ///     "+(-2CÃ°+2Dy-2Ex)e0214",
    ///     "+(-2Ax-2By-2Cz)e0123",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn norm() -> Self {
        Self::scalar() + Self::line()
    }
    /// The multivector of bias $`v^4_\infty \equiv w\e_0`$.
    #[must_use]
    #[inline]
    pub fn bias() -> Self {
        Self::e0()
    }
    /// The multivector of normal $`v^4_0 \equiv x\e_1 + y\e_2 + z\e_3 + Ã°\e_4 + Ã¸\e_5`$.
    #[must_use]
    #[inline]
    pub fn normal() -> Self {
        Self::e1() + Self::e2() + Self::e3() + Self::e4() + Self::e5()
    }
    /// The multivector of $`4`$-volume $`v^4 \equiv v^4_0 + v^4_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume4() -> Self {
        Self::bias() + Self::normal()
    }
    /// The multivector of volume displacement.
    ///
    /// ```math
    /// v_0 \equiv a\e_{23} + b\e_{31} + c\e_{12} + d\e_{41} + e\e_{42}
    ///          + f\e_{43} + g\e_{15} + h\e_{25} + i\e_{35} + j\e_{45}
    /// ```
    #[must_use]
    #[inline]
    pub fn volume_displacement() -> Self {
        Self::e23()
            + Self::e31()
            + Self::e12()
            + Self::e41()
            + Self::e42()
            + Self::e43()
            + Self::e15()
            + Self::e25()
            + Self::e35()
            + Self::e45()
    }
    /// The multivector of volume moment.
    ///
    /// ```math
    /// v_\infty \equiv X\e_{01} + Y\e_{02} + Z\e_{03} + Ã\e_{40} + Ã\e_{05}
    /// ```
    #[must_use]
    #[inline]
    pub fn volume_moment() -> Self {
        Self::e01() + Self::e02() + Self::e03() + Self::e40() + Self::e05()
    }
    /// The multivector of volume $`v \equiv v_0 + v_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume() -> Self {
        Self::volume_displacement() + Self::volume_moment()
    }
    /// The multivector of plane displacement.
    ///
    /// ```math
    /// p_0 \equiv a\e_{234} + b\e_{134} + c\e_{124} + d\e_{123} + e\e_{253}
    ///          + f\e_{315} + g\e_{152} + h\e_{145} + i\e_{245} + j\e_{345}
    /// ```
    #[must_use]
    #[inline]
    pub fn plane_displacement() -> Self {
        Self::e234()
            + Self::e134()
            + Self::e124()
            + Self::e123()
            + Self::e253()
            + Self::e315()
            + Self::e152()
            + Self::e145()
            + Self::e245()
            + Self::e345()
    }
    /// The multivector of plane moment.
    ///
    /// ```math
    /// p_\infty \equiv A\e_{015} + B\e_{052} + C\e_{035} + D\e_{054} + E\e_{014}
    ///               + F\e_{042} + G\e_{034} + H\e_{032} + I\e_{013} + J\e_{021}
    /// ```
    #[must_use]
    #[inline]
    pub fn plane_moment() -> Self {
        Self::e015()
            + Self::e052()
            + Self::e035()
            + Self::e054()
            + Self::e014()
            + Self::e042()
            + Self::e034()
            + Self::e032()
            + Self::e013()
            + Self::e021()
    }
    /// The multivector of plane $`p \equiv p_0 + p_\infty`$.
    #[must_use]
    #[inline]
    pub fn plane() -> Self {
        Self::plane_displacement() + Self::plane_moment()
    }
    /// The multivector of line displacement.
    ///
    /// ```math
    /// \ell_0 \equiv x\e_{2345} + y\e_{3145} + z\e_{1245} + Ã°\e_{1235} + Ã¸\e_{1234}
    /// ```
    #[must_use]
    #[inline]
    pub fn line_displacement() -> Self {
        Self::e2345() + Self::e3145() + Self::e1245() + Self::e1235() + Self::e1234()
    }
    /// The multivector of line moment.
    ///
    /// ```math
    /// \ell_\infty \equiv A\e_{0145} + B\e_{0245} + C\e_{0345} + D\e_{0325} + E\e_{0135}
    ///                  + F\e_{0215} + G\e_{0324} + H\e_{0134} + I\e_{0214} + J\e_{0123}
    /// ```
    #[must_use]
    #[inline]
    pub fn line_moment() -> Self {
        Self::e0145()
            + Self::e0245()
            + Self::e0345()
            + Self::e0325()
            + Self::e0135()
            + Self::e0215()
            + Self::e0324()
            + Self::e0134()
            + Self::e0214()
            + Self::e0123()
    }
    /// The multivector of line $`\ell \equiv \ell_0 + \ell_\infty`$.
    #[must_use]
    #[inline]
    pub fn line() -> Self {
        Self::line_displacement() + Self::line_moment()
    }
    /// The multivector of weight $`P_0 \equiv w\e_{12345}`$.
    #[must_use]
    #[inline]
    pub fn weight() -> Self {
        Self::e12345()
    }
    /// The multivector of direction.
    ///
    /// ```math
    /// P_\infty \equiv X\e_{03245} + Y\e_{01345} + Z\e_{02145} + Ã\e_{01235} + Ã\e_{01243}
    /// ```
    #[must_use]
    #[inline]
    pub fn direction() -> Self {
        Self::e03245() + Self::e01345() + Self::e02145() + Self::e01235() + Self::e01243()
    }
    /// The multivector of point $`P \equiv P_0 + P_\infty`$.
    #[must_use]
    #[inline]
    pub fn point() -> Self {
        Self::weight() + Self::direction()
    }
    /// The multivector of single rotator $`r_1 \equiv s + v_0`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let single_rotator = Vee::normal().lhs() * Vee::normal().rhs();
    ///
    /// assert_eq!(single_rotator.basis_blades(), Vee::single_rotator().basis_blades());
    /// format_eq!(single_rotator, [
    ///     "+xÍxÍ+yÍyÍ+zÍzÍ+Ã°ÍÃ°Í+Ã¸ÍÃ¸Í",
    ///     "+(+yÍzÍ-yÍzÍ)e23",
    ///     "+(-xÍzÍ+xÍzÍ)e31",
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    ///     "+(-xÍÃ°Í+xÍÃ°Í)e41",
    ///     "+(-yÍÃ°Í+yÍÃ°Í)e42",
    ///     "+(-zÍÃ°Í+zÍÃ°Í)e43",
    ///     "+(+xÍÃ¸Í-xÍÃ¸Í)e15",
    ///     "+(+yÍÃ¸Í-yÍÃ¸Í)e25",
    ///     "+(+zÍÃ¸Í-zÍÃ¸Í)e35",
    ///     "+(+Ã°ÍÃ¸Í-Ã°ÍÃ¸Í)e45",
    /// ]);
    ///
    /// let single_rotator = Vee::line_displacement().lhs() * Vee::line_displacement().rhs();
    ///
    /// assert_eq!(single_rotator.basis_blades(), Vee::single_rotator().basis_blades());
    /// format_eq!(single_rotator, [
    ///     "+xÍxÍ+yÍyÍ+zÍzÍ+Ã°ÍÃ°Í+Ã¸ÍÃ¸Í",
    ///     "+(+yÍzÍ-yÍzÍ)e23",
    ///     "+(-xÍzÍ+xÍzÍ)e31",
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    ///     "+(+xÍÃ°Í-xÍÃ°Í)e41",
    ///     "+(+yÍÃ°Í-yÍÃ°Í)e42",
    ///     "+(+zÍÃ°Í-zÍÃ°Í)e43",
    ///     "+(+xÍÃ¸Í-xÍÃ¸Í)e15",
    ///     "+(+yÍÃ¸Í-yÍÃ¸Í)e25",
    ///     "+(+zÍÃ¸Í-zÍÃ¸Í)e35",
    ///     "+(-Ã°ÍÃ¸Í+Ã°ÍÃ¸Í)e45",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn single_rotator() -> Self {
        Self::scalar() + Self::volume_displacement()
    }
    /// The multivector of double rotator $`r_2 \equiv s + v_0 + \ell_0`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let double_rotator = Vee::single_rotator().lhs() * Vee::single_rotator().rhs();
    ///
    /// assert_eq!(double_rotator.basis_blades(), Vee::double_rotator().basis_blades());
    /// format_eq!(double_rotator, [
    ///     "-aÍaÍ-bÍbÍ-cÍcÍ-dÍdÍ-eÍeÍ-fÍfÍ-gÍgÍ-hÍhÍ-iÍiÍ-jÍjÍ+vÍvÍ",
    ///     "+(+aÍvÍ+aÍvÍ-bÍcÍ+bÍcÍ-eÍfÍ+eÍfÍ-hÍiÍ+hÍiÍ)e23",
    ///     "+(+aÍcÍ-aÍcÍ+bÍvÍ+bÍvÍ+dÍfÍ-dÍfÍ+gÍiÍ-gÍiÍ)e31",
    ///     "+(-aÍbÍ+aÍbÍ+cÍvÍ+cÍvÍ-dÍeÍ+dÍeÍ-gÍhÍ+gÍhÍ)e12",
    ///     "+(-bÍfÍ+bÍfÍ+cÍeÍ-cÍeÍ+dÍvÍ+dÍvÍ+gÍjÍ-gÍjÍ)e41",
    ///     "+(+aÍfÍ-aÍfÍ-cÍdÍ+cÍdÍ+eÍvÍ+eÍvÍ+hÍjÍ-hÍjÍ)e42",
    ///     "+(-aÍeÍ+aÍeÍ+bÍdÍ-bÍdÍ+fÍvÍ+fÍvÍ+iÍjÍ-iÍjÍ)e43",
    ///     "+(-bÍiÍ+bÍiÍ+cÍhÍ-cÍhÍ-dÍjÍ+dÍjÍ+gÍvÍ+gÍvÍ)e15",
    ///     "+(+aÍiÍ-aÍiÍ-cÍgÍ+cÍgÍ-eÍjÍ+eÍjÍ+hÍvÍ+hÍvÍ)e25",
    ///     "+(-aÍhÍ+aÍhÍ+bÍgÍ-bÍgÍ-fÍjÍ+fÍjÍ+iÍvÍ+iÍvÍ)e35",
    ///     "+(+dÍgÍ-dÍgÍ+eÍhÍ-eÍhÍ+fÍiÍ-fÍiÍ+jÍvÍ+jÍvÍ)e45",
    ///     "+(+aÍjÍ+aÍjÍ+eÍiÍ+eÍiÍ-fÍhÍ-fÍhÍ)e2345",
    ///     "+(+bÍjÍ+bÍjÍ-dÍiÍ-dÍiÍ+fÍgÍ+fÍgÍ)e3145",
    ///     "+(+cÍjÍ+cÍjÍ+dÍhÍ+dÍhÍ-eÍgÍ-eÍgÍ)e1245",
    ///     "+(+aÍgÍ+aÍgÍ+bÍhÍ+bÍhÍ+cÍiÍ+cÍiÍ)e1235",
    ///     "+(-aÍdÍ-aÍdÍ-bÍeÍ-bÍeÍ-cÍfÍ-cÍfÍ)e1234",
    /// ]);
    ///
    /// let double_rotator = Vee::volume_displacement().lhs() * Vee::volume_displacement().rhs();
    ///
    /// assert_eq!(double_rotator.basis_blades(), Vee::double_rotator().basis_blades());
    /// format_eq!(double_rotator, [
    ///     "-aÍaÍ-bÍbÍ-cÍcÍ-dÍdÍ-eÍeÍ-fÍfÍ-gÍgÍ-hÍhÍ-iÍiÍ-jÍjÍ",
    ///     "+(-bÍcÍ+bÍcÍ-eÍfÍ+eÍfÍ-hÍiÍ+hÍiÍ)e23",
    ///     "+(+aÍcÍ-aÍcÍ+dÍfÍ-dÍfÍ+gÍiÍ-gÍiÍ)e31",
    ///     "+(-aÍbÍ+aÍbÍ-dÍeÍ+dÍeÍ-gÍhÍ+gÍhÍ)e12",
    ///     "+(-bÍfÍ+bÍfÍ+cÍeÍ-cÍeÍ+gÍjÍ-gÍjÍ)e41",
    ///     "+(+aÍfÍ-aÍfÍ-cÍdÍ+cÍdÍ+hÍjÍ-hÍjÍ)e42",
    ///     "+(-aÍeÍ+aÍeÍ+bÍdÍ-bÍdÍ+iÍjÍ-iÍjÍ)e43",
    ///     "+(-bÍiÍ+bÍiÍ+cÍhÍ-cÍhÍ-dÍjÍ+dÍjÍ)e15",
    ///     "+(+aÍiÍ-aÍiÍ-cÍgÍ+cÍgÍ-eÍjÍ+eÍjÍ)e25",
    ///     "+(-aÍhÍ+aÍhÍ+bÍgÍ-bÍgÍ-fÍjÍ+fÍjÍ)e35",
    ///     "+(+dÍgÍ-dÍgÍ+eÍhÍ-eÍhÍ+fÍiÍ-fÍiÍ)e45",
    ///     "+(+aÍjÍ+aÍjÍ+eÍiÍ+eÍiÍ-fÍhÍ-fÍhÍ)e2345",
    ///     "+(+bÍjÍ+bÍjÍ-dÍiÍ-dÍiÍ+fÍgÍ+fÍgÍ)e3145",
    ///     "+(+cÍjÍ+cÍjÍ+dÍhÍ+dÍhÍ-eÍgÍ-eÍgÍ)e1245",
    ///     "+(+aÍgÍ+aÍgÍ+bÍhÍ+bÍhÍ+cÍiÍ+cÍiÍ)e1235",
    ///     "+(-aÍdÍ-aÍdÍ-bÍeÍ-bÍeÍ-cÍfÍ-cÍfÍ)e1234",
    /// ]);
    ///
    /// let double_rotator = Vee::plane_displacement().lhs() * Vee::plane_displacement().rhs();
    ///
    /// assert_eq!(double_rotator.basis_blades(), Vee::double_rotator().basis_blades());
    /// format_eq!(double_rotator, [
    ///     "-aÍaÍ-bÍbÍ-cÍcÍ-dÍdÍ-eÍeÍ-fÍfÍ-gÍgÍ-hÍhÍ-iÍiÍ-jÍjÍ",
    ///     "+(+bÍcÍ-bÍcÍ+fÍgÍ-fÍgÍ-iÍjÍ+iÍjÍ)e23",
    ///     "+(+aÍcÍ-aÍcÍ+eÍgÍ-eÍgÍ+hÍjÍ-hÍjÍ)e31",
    ///     "+(+aÍbÍ-aÍbÍ+eÍfÍ-eÍfÍ-hÍiÍ+hÍiÍ)e12",
    ///     "+(-aÍdÍ+aÍdÍ+fÍjÍ-fÍjÍ+gÍiÍ-gÍiÍ)e41",
    ///     "+(+bÍdÍ-bÍdÍ+eÍjÍ-eÍjÍ-gÍhÍ+gÍhÍ)e42",
    ///     "+(-cÍdÍ+cÍdÍ-eÍiÍ+eÍiÍ-fÍhÍ+fÍhÍ)e43",
    ///     "+(-bÍjÍ+bÍjÍ-cÍiÍ+cÍiÍ+dÍeÍ-dÍeÍ)e15",
    ///     "+(-aÍjÍ+aÍjÍ+cÍhÍ-cÍhÍ-dÍfÍ+dÍfÍ)e25",
    ///     "+(+aÍiÍ-aÍiÍ+bÍhÍ-bÍhÍ+dÍgÍ-dÍgÍ)e35",
    ///     "+(+aÍeÍ-aÍeÍ+bÍfÍ-bÍfÍ+cÍgÍ-cÍgÍ)e45",
    ///     "+(-bÍgÍ-bÍgÍ+cÍfÍ+cÍfÍ+dÍhÍ+dÍhÍ)e2345",
    ///     "+(-aÍgÍ-aÍgÍ+cÍeÍ+cÍeÍ+dÍiÍ+dÍiÍ)e3145",
    ///     "+(-aÍfÍ-aÍfÍ+bÍeÍ+bÍeÍ+dÍjÍ+dÍjÍ)e1245",
    ///     "+(-aÍhÍ-aÍhÍ+bÍiÍ+bÍiÍ-cÍjÍ-cÍjÍ)e1235",
    ///     "+(-eÍhÍ-eÍhÍ+fÍiÍ+fÍiÍ-gÍjÍ-gÍjÍ)e1234",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn double_rotator() -> Self {
        Self::scalar() + Self::volume_displacement() + Self::line_displacement()
    }
    /// The multivector of translator $`t \equiv s + v_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let translator = Vee::point().lhs() * Vee::point().rhs();
    ///
    /// assert_eq!(translator.basis_blades(), Vee::translator().basis_blades());
    /// format_eq!(translator, [
    ///     "+wÍwÍ",
    ///     "+(-XÍwÍ+XÍwÍ)e01",
    ///     "+(-YÍwÍ+YÍwÍ)e02",
    ///     "+(-ZÍwÍ+ZÍwÍ)e03",
    ///     "+(-wÍÃÍ+wÍÃÍ)e40",
    ///     "+(+wÍÃÍ-wÍÃÍ)e05",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn translator() -> Self {
        Self::scalar() + Self::volume_moment()
    }
    /// The multivector of simple single motor $`m_{s1} \equiv s + v`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let simple_single_motor = Vee::volume4().lhs() * Vee::volume4().rhs();
    ///
    /// assert_eq!(simple_single_motor.basis_blades(), Vee::simple_single_motor().basis_blades());
    /// format_eq!(simple_single_motor, [
    ///     "+xÍxÍ+yÍyÍ+zÍzÍ+Ã°ÍÃ°Í+Ã¸ÍÃ¸Í",
    ///     "+(+WÍxÍ-WÍxÍ)e01",
    ///     "+(+WÍyÍ-WÍyÍ)e02",
    ///     "+(+WÍzÍ-WÍzÍ)e03",
    ///     "+(-WÍÃ°Í+WÍÃ°Í)e40",
    ///     "+(+WÍÃ¸Í-WÍÃ¸Í)e05",
    ///     "+(+yÍzÍ-yÍzÍ)e23",
    ///     "+(-xÍzÍ+xÍzÍ)e31",
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    ///     "+(-xÍÃ°Í+xÍÃ°Í)e41",
    ///     "+(-yÍÃ°Í+yÍÃ°Í)e42",
    ///     "+(-zÍÃ°Í+zÍÃ°Í)e43",
    ///     "+(+xÍÃ¸Í-xÍÃ¸Í)e15",
    ///     "+(+yÍÃ¸Í-yÍÃ¸Í)e25",
    ///     "+(+zÍÃ¸Í-zÍÃ¸Í)e35",
    ///     "+(+Ã°ÍÃ¸Í-Ã°ÍÃ¸Í)e45",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn simple_single_motor() -> Self {
        Self::scalar() + Self::volume()
    }
    /// The multivector of single motor $`m_1 \equiv s + v + \ell_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let single_motor = Vee::single_rotator().lhs() * Vee::translator().rhs();
    ///
    /// assert_eq!(single_motor.basis_blades(), Vee::single_motor().basis_blades());
    /// format_eq!(single_motor, [
    ///     "+vÍvÍ",
    ///     "+(+XÍvÍ+YÍcÍ-ZÍbÍ+dÍÃÍ+gÍÃÍ)e01",
    ///     "+(-XÍcÍ+YÍvÍ+ZÍaÍ+eÍÃÍ+hÍÃÍ)e02",
    ///     "+(+XÍbÍ-YÍaÍ+ZÍvÍ+fÍÃÍ+iÍÃÍ)e03",
    ///     "+(-XÍdÍ-YÍeÍ-ZÍfÍ-jÍÃÍ+vÍÃÍ)e40",
    ///     "+(-XÍgÍ-YÍhÍ-ZÍiÍ+jÍÃÍ+vÍÃÍ)e05",
    ///     "+aÍvÍe23",
    ///     "+bÍvÍe31",
    ///     "+cÍvÍe12",
    ///     "+dÍvÍe41",
    ///     "+eÍvÍe42",
    ///     "+fÍvÍe43",
    ///     "+gÍvÍe15",
    ///     "+hÍvÍe25",
    ///     "+iÍvÍe35",
    ///     "+jÍvÍe45",
    ///     "+(+XÍjÍ-dÍÃÍ+gÍÃÍ)e0145",
    ///     "+(+YÍjÍ-eÍÃÍ+hÍÃÍ)e0245",
    ///     "+(+ZÍjÍ-fÍÃÍ+iÍÃÍ)e0345",
    ///     "+(-YÍiÍ+ZÍhÍ-aÍÃÍ)e0325",
    ///     "+(+XÍiÍ-ZÍgÍ-bÍÃÍ)e0135",
    ///     "+(-XÍhÍ+YÍgÍ-cÍÃÍ)e0215",
    ///     "+(+YÍfÍ-ZÍeÍ+aÍÃÍ)e0324",
    ///     "+(-XÍfÍ+ZÍdÍ+bÍÃÍ)e0134",
    ///     "+(+XÍeÍ-YÍdÍ+cÍÃÍ)e0214",
    ///     "+(+XÍaÍ+YÍbÍ+ZÍcÍ)e0123",
    /// ]);
    ///
    /// let single_motor = Vee::line().lhs() * Vee::line().rhs();
    ///
    /// assert_eq!(single_motor.basis_blades(), Vee::single_motor().basis_blades());
    /// format_eq!(single_motor, [
    ///     "+xÍxÍ+yÍyÍ+zÍzÍ+Ã°ÍÃ°Í+Ã¸ÍÃ¸Í",
    ///     "+(+BÍzÍ-BÍzÍ-CÍyÍ+CÍyÍ-DÍÃ°Í+DÍÃ°Í-GÍÃ¸Í+GÍÃ¸Í)e01",
    ///     "+(-AÍzÍ+AÍzÍ+CÍxÍ-CÍxÍ-EÍÃ°Í+EÍÃ°Í-HÍÃ¸Í+HÍÃ¸Í)e02",
    ///     "+(+AÍyÍ-AÍyÍ-BÍxÍ+BÍxÍ-FÍÃ°Í+FÍÃ°Í-IÍÃ¸Í+IÍÃ¸Í)e03",
    ///     "+(+DÍxÍ-DÍxÍ+EÍyÍ-EÍyÍ+FÍzÍ-FÍzÍ+JÍÃ¸Í-JÍÃ¸Í)e40",
    ///     "+(+GÍxÍ-GÍxÍ+HÍyÍ-HÍyÍ+IÍzÍ-IÍzÍ-JÍÃ°Í+JÍÃ°Í)e05",
    ///     "+(+yÍzÍ-yÍzÍ)e23",
    ///     "+(-xÍzÍ+xÍzÍ)e31",
    ///     "+(+xÍyÍ-xÍyÍ)e12",
    ///     "+(+xÍÃ°Í-xÍÃ°Í)e41",
    ///     "+(+yÍÃ°Í-yÍÃ°Í)e42",
    ///     "+(+zÍÃ°Í-zÍÃ°Í)e43",
    ///     "+(+xÍÃ¸Í-xÍÃ¸Í)e15",
    ///     "+(+yÍÃ¸Í-yÍÃ¸Í)e25",
    ///     "+(+zÍÃ¸Í-zÍÃ¸Í)e35",
    ///     "+(-Ã°ÍÃ¸Í+Ã°ÍÃ¸Í)e45",
    ///     "+(+DÍÃ¸Í+DÍÃ¸Í-GÍÃ°Í-GÍÃ°Í-JÍxÍ-JÍxÍ)e0145",
    ///     "+(+EÍÃ¸Í+EÍÃ¸Í-HÍÃ°Í-HÍÃ°Í-JÍyÍ-JÍyÍ)e0245",
    ///     "+(+FÍÃ¸Í+FÍÃ¸Í-IÍÃ°Í-IÍÃ°Í-JÍzÍ-JÍzÍ)e0345",
    ///     "+(+AÍÃ¸Í+AÍÃ¸Í-HÍzÍ-HÍzÍ+IÍyÍ+IÍyÍ)e0325",
    ///     "+(+BÍÃ¸Í+BÍÃ¸Í+GÍzÍ+GÍzÍ-IÍxÍ-IÍxÍ)e0135",
    ///     "+(+CÍÃ¸Í+CÍÃ¸Í-GÍyÍ-GÍyÍ+HÍxÍ+HÍxÍ)e0215",
    ///     "+(-AÍÃ°Í-AÍÃ°Í+EÍzÍ+EÍzÍ-FÍyÍ-FÍyÍ)e0324",
    ///     "+(-BÍÃ°Í-BÍÃ°Í-DÍzÍ-DÍzÍ+FÍxÍ+FÍxÍ)e0134",
    ///     "+(-CÍÃ°Í-CÍÃ°Í+DÍyÍ+DÍyÍ-EÍxÍ-EÍxÍ)e0214",
    ///     "+(-AÍxÍ-AÍxÍ-BÍyÍ-BÍyÍ-CÍzÍ-CÍzÍ)e0123",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn single_motor() -> Self {
        Self::scalar() + Self::volume() + Self::line_moment()
    }
    /// The multivector of simple double motor $`m_{s2} \equiv s + v + \ell`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let simple_double_motor = Vee::volume().lhs() * Vee::volume().rhs();
    ///
    /// assert_eq!(simple_double_motor.basis_blades(), Vee::simple_double_motor().basis_blades());
    /// format_eq!(simple_double_motor, [
    ///     "-aÍaÍ-bÍbÍ-cÍcÍ-dÍdÍ-eÍeÍ-fÍfÍ-gÍgÍ-hÍhÍ-iÍiÍ-jÍjÍ",
    ///     "+(-YÍcÍ+YÍcÍ+ZÍbÍ-ZÍbÍ+dÍÃÍ-dÍÃÍ+gÍÃÍ-gÍÃÍ)e01",
    ///     "+(+XÍcÍ-XÍcÍ-ZÍaÍ+ZÍaÍ+eÍÃÍ-eÍÃÍ+hÍÃÍ-hÍÃÍ)e02",
    ///     "+(-XÍbÍ+XÍbÍ+YÍaÍ-YÍaÍ+fÍÃÍ-fÍÃÍ+iÍÃÍ-iÍÃÍ)e03",
    ///     "+(+XÍdÍ-XÍdÍ+YÍeÍ-YÍeÍ+ZÍfÍ-ZÍfÍ-jÍÃÍ+jÍÃÍ)e40",
    ///     "+(+XÍgÍ-XÍgÍ+YÍhÍ-YÍhÍ+ZÍiÍ-ZÍiÍ+jÍÃÍ-jÍÃÍ)e05",
    ///     "+(-bÍcÍ+bÍcÍ-eÍfÍ+eÍfÍ-hÍiÍ+hÍiÍ)e23",
    ///     "+(+aÍcÍ-aÍcÍ+dÍfÍ-dÍfÍ+gÍiÍ-gÍiÍ)e31",
    ///     "+(-aÍbÍ+aÍbÍ-dÍeÍ+dÍeÍ-gÍhÍ+gÍhÍ)e12",
    ///     "+(-bÍfÍ+bÍfÍ+cÍeÍ-cÍeÍ+gÍjÍ-gÍjÍ)e41",
    ///     "+(+aÍfÍ-aÍfÍ-cÍdÍ+cÍdÍ+hÍjÍ-hÍjÍ)e42",
    ///     "+(-aÍeÍ+aÍeÍ+bÍdÍ-bÍdÍ+iÍjÍ-iÍjÍ)e43",
    ///     "+(-bÍiÍ+bÍiÍ+cÍhÍ-cÍhÍ-dÍjÍ+dÍjÍ)e15",
    ///     "+(+aÍiÍ-aÍiÍ-cÍgÍ+cÍgÍ-eÍjÍ+eÍjÍ)e25",
    ///     "+(-aÍhÍ+aÍhÍ+bÍgÍ-bÍgÍ-fÍjÍ+fÍjÍ)e35",
    ///     "+(+dÍgÍ-dÍgÍ+eÍhÍ-eÍhÍ+fÍiÍ-fÍiÍ)e45",
    ///     "+(+aÍjÍ+aÍjÍ+eÍiÍ+eÍiÍ-fÍhÍ-fÍhÍ)e2345",
    ///     "+(+bÍjÍ+bÍjÍ-dÍiÍ-dÍiÍ+fÍgÍ+fÍgÍ)e3145",
    ///     "+(+cÍjÍ+cÍjÍ+dÍhÍ+dÍhÍ-eÍgÍ-eÍgÍ)e1245",
    ///     "+(+aÍgÍ+aÍgÍ+bÍhÍ+bÍhÍ+cÍiÍ+cÍiÍ)e1235",
    ///     "+(-aÍdÍ-aÍdÍ-bÍeÍ-bÍeÍ-cÍfÍ-cÍfÍ)e1234",
    ///     "+(+XÍjÍ+XÍjÍ-dÍÃÍ-dÍÃÍ+gÍÃÍ+gÍÃÍ)e0145",
    ///     "+(+YÍjÍ+YÍjÍ-eÍÃÍ-eÍÃÍ+hÍÃÍ+hÍÃÍ)e0245",
    ///     "+(+ZÍjÍ+ZÍjÍ-fÍÃÍ-fÍÃÍ+iÍÃÍ+iÍÃÍ)e0345",
    ///     "+(-YÍiÍ-YÍiÍ+ZÍhÍ+ZÍhÍ-aÍÃÍ-aÍÃÍ)e0325",
    ///     "+(+XÍiÍ+XÍiÍ-ZÍgÍ-ZÍgÍ-bÍÃÍ-bÍÃÍ)e0135",
    ///     "+(-XÍhÍ-XÍhÍ+YÍgÍ+YÍgÍ-cÍÃÍ-cÍÃÍ)e0215",
    ///     "+(+YÍfÍ+YÍfÍ-ZÍeÍ-ZÍeÍ+aÍÃÍ+aÍÃÍ)e0324",
    ///     "+(-XÍfÍ-XÍfÍ+ZÍdÍ+ZÍdÍ+bÍÃÍ+bÍÃÍ)e0134",
    ///     "+(+XÍeÍ+XÍeÍ-YÍdÍ-YÍdÍ+cÍÃÍ+cÍÃÍ)e0214",
    ///     "+(+XÍaÍ+XÍaÍ+YÍbÍ+YÍbÍ+ZÍcÍ+ZÍcÍ)e0123",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn simple_double_motor() -> Self {
        Self::scalar() + Self::volume() + Self::line()
    }
    /// The multivector of double motor $`m_2 \equiv s + v + \ell + S`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let double_motor = Vee::double_rotator().lhs() * Vee::translator().rhs();
    ///
    /// assert_eq!(double_motor.basis_blades(), Vee::double_motor().basis_blades());
    /// format_eq!(double_motor, [
    ///     "+vÍvÍ",
    ///     "+(+XÍvÍ+YÍcÍ-ZÍbÍ+dÍÃÍ+gÍÃÍ)e01",
    ///     "+(-XÍcÍ+YÍvÍ+ZÍaÍ+eÍÃÍ+hÍÃÍ)e02",
    ///     "+(+XÍbÍ-YÍaÍ+ZÍvÍ+fÍÃÍ+iÍÃÍ)e03",
    ///     "+(-XÍdÍ-YÍeÍ-ZÍfÍ-jÍÃÍ+vÍÃÍ)e40",
    ///     "+(-XÍgÍ-YÍhÍ-ZÍiÍ+jÍÃÍ+vÍÃÍ)e05",
    ///     "+aÍvÍe23",
    ///     "+bÍvÍe31",
    ///     "+cÍvÍe12",
    ///     "+dÍvÍe41",
    ///     "+eÍvÍe42",
    ///     "+fÍvÍe43",
    ///     "+gÍvÍe15",
    ///     "+hÍvÍe25",
    ///     "+iÍvÍe35",
    ///     "+jÍvÍe45",
    ///     "+vÍxÍe2345",
    ///     "+vÍyÍe3145",
    ///     "+vÍzÍe1245",
    ///     "+vÍÃ°Íe1235",
    ///     "+vÍÃ¸Íe1234",
    ///     "+(+XÍjÍ+YÍzÍ-ZÍyÍ-dÍÃÍ+gÍÃÍ)e0145",
    ///     "+(-XÍzÍ+YÍjÍ+ZÍxÍ-eÍÃÍ+hÍÃÍ)e0245",
    ///     "+(+XÍyÍ-YÍxÍ+ZÍjÍ-fÍÃÍ+iÍÃÍ)e0345",
    ///     "+(+XÍÃ°Í-YÍiÍ+ZÍhÍ-aÍÃÍ-xÍÃÍ)e0325",
    ///     "+(+XÍiÍ+YÍÃ°Í-ZÍgÍ-bÍÃÍ-yÍÃÍ)e0135",
    ///     "+(-XÍhÍ+YÍgÍ+ZÍÃ°Í-cÍÃÍ-zÍÃÍ)e0215",
    ///     "+(+XÍÃ¸Í+YÍfÍ-ZÍeÍ+aÍÃÍ-xÍÃÍ)e0324",
    ///     "+(-XÍfÍ+YÍÃ¸Í+ZÍdÍ+bÍÃÍ-yÍÃÍ)e0134",
    ///     "+(+XÍeÍ-YÍdÍ+ZÍÃ¸Í+cÍÃÍ-zÍÃÍ)e0214",
    ///     "+(+XÍaÍ+YÍbÍ+ZÍcÍ-ÃÍÃ¸Í+ÃÍÃ°Í)e0123",
    ///     "+(+XÍxÍ+YÍyÍ+ZÍzÍ+ÃÍÃ°Í+ÃÍÃ¸Í)I",
    /// ]);
    ///
    /// let double_motor = Vee::plane().lhs() * Vee::plane().rhs();
    ///
    /// assert_eq!(double_motor.basis_blades(), Vee::double_motor().basis_blades());
    /// format_eq!(double_motor, [
    ///     "-aÍaÍ-bÍbÍ-cÍcÍ-dÍdÍ-eÍeÍ-fÍfÍ-gÍgÍ-hÍhÍ-iÍiÍ-jÍjÍ",
    ///     "+(-BÍgÍ+BÍgÍ+CÍfÍ-CÍfÍ+DÍhÍ-DÍhÍ+FÍcÍ-FÍcÍ-GÍbÍ+GÍbÍ+HÍdÍ-HÍdÍ)e01",
    ///     "+(-AÍgÍ+AÍgÍ+CÍeÍ-CÍeÍ+DÍiÍ-DÍiÍ+EÍcÍ-EÍcÍ-GÍaÍ+GÍaÍ+IÍdÍ-IÍdÍ)e02",
    ///     "+(-AÍfÍ+AÍfÍ+BÍeÍ-BÍeÍ+DÍjÍ-DÍjÍ+EÍbÍ-EÍbÍ-FÍaÍ+FÍaÍ+JÍdÍ-JÍdÍ)e03",
    ///     "+(-AÍhÍ+AÍhÍ+BÍiÍ-BÍiÍ-CÍjÍ+CÍjÍ-HÍaÍ+HÍaÍ+IÍbÍ-IÍbÍ-JÍcÍ+JÍcÍ)e40",
    ///     "+(-EÍhÍ+EÍhÍ+FÍiÍ-FÍiÍ-GÍjÍ+GÍjÍ-HÍeÍ+HÍeÍ+IÍfÍ-IÍfÍ-JÍgÍ+JÍgÍ)e05",
    ///     "+(+bÍcÍ-bÍcÍ+fÍgÍ-fÍgÍ-iÍjÍ+iÍjÍ)e23",
    ///     "+(+aÍcÍ-aÍcÍ+eÍgÍ-eÍgÍ+hÍjÍ-hÍjÍ)e31",
    ///     "+(+aÍbÍ-aÍbÍ+eÍfÍ-eÍfÍ-hÍiÍ+hÍiÍ)e12",
    ///     "+(-aÍdÍ+aÍdÍ+fÍjÍ-fÍjÍ+gÍiÍ-gÍiÍ)e41",
    ///     "+(+bÍdÍ-bÍdÍ+eÍjÍ-eÍjÍ-gÍhÍ+gÍhÍ)e42",
    ///     "+(-cÍdÍ+cÍdÍ-eÍiÍ+eÍiÍ-fÍhÍ+fÍhÍ)e43",
    ///     "+(-bÍjÍ+bÍjÍ-cÍiÍ+cÍiÍ+dÍeÍ-dÍeÍ)e15",
    ///     "+(-aÍjÍ+aÍjÍ+cÍhÍ-cÍhÍ-dÍfÍ+dÍfÍ)e25",
    ///     "+(+aÍiÍ-aÍiÍ+bÍhÍ-bÍhÍ+dÍgÍ-dÍgÍ)e35",
    ///     "+(+aÍeÍ-aÍeÍ+bÍfÍ-bÍfÍ+cÍgÍ-cÍgÍ)e45",
    ///     "+(-bÍgÍ-bÍgÍ+cÍfÍ+cÍfÍ+dÍhÍ+dÍhÍ)e2345",
    ///     "+(-aÍgÍ-aÍgÍ+cÍeÍ+cÍeÍ+dÍiÍ+dÍiÍ)e3145",
    ///     "+(-aÍfÍ-aÍfÍ+bÍeÍ+bÍeÍ+dÍjÍ+dÍjÍ)e1245",
    ///     "+(-aÍhÍ-aÍhÍ+bÍiÍ+bÍiÍ-cÍjÍ-cÍjÍ)e1235",
    ///     "+(-eÍhÍ-eÍhÍ+fÍiÍ+fÍiÍ-gÍjÍ-gÍjÍ)e1234",
    ///     "+(-BÍcÍ-BÍcÍ+CÍbÍ+CÍbÍ-FÍgÍ-FÍgÍ+GÍfÍ+GÍfÍ+IÍjÍ+IÍjÍ-JÍiÍ-JÍiÍ)e0145",
    ///     "+(-AÍcÍ-AÍcÍ+CÍaÍ+CÍaÍ-EÍgÍ-EÍgÍ+GÍeÍ+GÍeÍ-HÍjÍ-HÍjÍ+JÍhÍ+JÍhÍ)e0245",
    ///     "+(-AÍbÍ-AÍbÍ+BÍaÍ+BÍaÍ-EÍfÍ-EÍfÍ+FÍeÍ+FÍeÍ+HÍiÍ+HÍiÍ-IÍhÍ-IÍhÍ)e0345",
    ///     "+(+AÍdÍ+AÍdÍ-DÍaÍ-DÍaÍ-FÍjÍ-FÍjÍ-GÍiÍ-GÍiÍ+IÍgÍ+IÍgÍ+JÍfÍ+JÍfÍ)e0325",
    ///     "+(-BÍdÍ-BÍdÍ+DÍbÍ+DÍbÍ-EÍjÍ-EÍjÍ+GÍhÍ+GÍhÍ-HÍgÍ-HÍgÍ+JÍeÍ+JÍeÍ)e0135",
    ///     "+(+CÍdÍ+CÍdÍ-DÍcÍ-DÍcÍ+EÍiÍ+EÍiÍ+FÍhÍ+FÍhÍ-HÍfÍ-HÍfÍ-IÍeÍ-IÍeÍ)e0215",
    ///     "+(+BÍjÍ+BÍjÍ+CÍiÍ+CÍiÍ-DÍeÍ-DÍeÍ+EÍdÍ+EÍdÍ-IÍcÍ-IÍcÍ-JÍbÍ-JÍbÍ)e0324",
    ///     "+(+AÍjÍ+AÍjÍ-CÍhÍ-CÍhÍ+DÍfÍ+DÍfÍ-FÍdÍ-FÍdÍ+HÍcÍ+HÍcÍ-JÍaÍ-JÍaÍ)e0134",
    ///     "+(-AÍiÍ-AÍiÍ-BÍhÍ-BÍhÍ-DÍgÍ-DÍgÍ+GÍdÍ+GÍdÍ+HÍbÍ+HÍbÍ+IÍaÍ+IÍaÍ)e0214",
    ///     "+(-AÍeÍ-AÍeÍ-BÍfÍ-BÍfÍ-CÍgÍ-CÍgÍ+EÍaÍ+EÍaÍ+FÍbÍ+FÍbÍ+GÍcÍ+GÍcÍ)e0123",
    ///     "+(-AÍaÍ+AÍaÍ-BÍbÍ+BÍbÍ-CÍcÍ+CÍcÍ-DÍdÍ+DÍdÍ-EÍeÍ+EÍeÍ-FÍfÍ+FÍfÍ-GÍgÍ+GÍgÍ-HÍhÍ+HÍhÍ-IÍiÍ+IÍiÍ-JÍjÍ+JÍjÍ)I",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn double_motor() -> Self {
        Self::scalar() + Self::volume() + Self::line() + Self::pseudoscalar()
    }
    /// The multivector of single rotoreflector $`f_{r1} \equiv h_0 + p_0`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let single_rotoreflector = Vee::normal().lhs() * Vee::single_rotator().rhs();
    ///
    /// assert_eq!(single_rotoreflector.basis_blades(), Vee::single_rotoreflector().basis_blades());
    /// format_eq!(single_rotoreflector, [
    ///     "+(+bÍzÍ-cÍyÍ+dÍÃ°Í-gÍÃ¸Í+vÍxÍ)e1",
    ///     "+(-aÍzÍ+cÍxÍ+eÍÃ°Í-hÍÃ¸Í+vÍyÍ)e2",
    ///     "+(+aÍyÍ-bÍxÍ+fÍÃ°Í-iÍÃ¸Í+vÍzÍ)e3",
    ///     "+(-dÍxÍ-eÍyÍ-fÍzÍ-jÍÃ¸Í+vÍÃ°Í)e4",
    ///     "+(+gÍxÍ+hÍyÍ+iÍzÍ+jÍÃ°Í+vÍÃ¸Í)e5",
    ///     "+(+aÍÃ°Í+eÍzÍ-fÍyÍ)e234",
    ///     "+(-bÍÃ°Í+dÍzÍ-fÍxÍ)e134",
    ///     "+(+cÍÃ°Í+dÍyÍ-eÍxÍ)e124",
    ///     "+(+aÍxÍ+bÍyÍ+cÍzÍ)e123",
    ///     "+(-aÍÃ¸Í+hÍzÍ-iÍyÍ)e253",
    ///     "+(+bÍÃ¸Í+gÍzÍ-iÍxÍ)e315",
    ///     "+(-cÍÃ¸Í+gÍyÍ-hÍxÍ)e152",
    ///     "+(-dÍÃ¸Í-gÍÃ°Í+jÍxÍ)e145",
    ///     "+(-eÍÃ¸Í-hÍÃ°Í+jÍyÍ)e245",
    ///     "+(-fÍÃ¸Í-iÍÃ°Í+jÍzÍ)e345",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn single_rotoreflector() -> Self {
        Self::normal() + Self::plane_displacement()
    }
    /// The multivector of double rotoreflector $`f_{r2} \equiv h_0 + p_0 + P_0`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let double_rotoreflector = Vee::normal().lhs() * Vee::double_rotator().rhs();
    ///
    /// assert_eq!(double_rotoreflector.basis_blades(), Vee::double_rotoreflector().basis_blades());
    /// format_eq!(double_rotoreflector, [
    ///     "+(+bÍzÍ-cÍyÍ+dÍÃ°Í-gÍÃ¸Í+vÍxÍ)e1",
    ///     "+(-aÍzÍ+cÍxÍ+eÍÃ°Í-hÍÃ¸Í+vÍyÍ)e2",
    ///     "+(+aÍyÍ-bÍxÍ+fÍÃ°Í-iÍÃ¸Í+vÍzÍ)e3",
    ///     "+(-dÍxÍ-eÍyÍ-fÍzÍ-jÍÃ¸Í+vÍÃ°Í)e4",
    ///     "+(+gÍxÍ+hÍyÍ+iÍzÍ+jÍÃ°Í+vÍÃ¸Í)e5",
    ///     "+(+aÍÃ°Í+eÍzÍ-fÍyÍ+xÍÃ¸Í-xÍÃ¸Í)e234",
    ///     "+(-bÍÃ°Í+dÍzÍ-fÍxÍ-yÍÃ¸Í+yÍÃ¸Í)e134",
    ///     "+(+cÍÃ°Í+dÍyÍ-eÍxÍ+zÍÃ¸Í-zÍÃ¸Í)e124",
    ///     "+(+aÍxÍ+bÍyÍ+cÍzÍ-Ã°ÍÃ¸Í-Ã°ÍÃ¸Í)e123",
    ///     "+(-aÍÃ¸Í+hÍzÍ-iÍyÍ-xÍÃ°Í-xÍÃ°Í)e253",
    ///     "+(+bÍÃ¸Í+gÍzÍ-iÍxÍ+yÍÃ°Í+yÍÃ°Í)e315",
    ///     "+(-cÍÃ¸Í+gÍyÍ-hÍxÍ-zÍÃ°Í-zÍÃ°Í)e152",
    ///     "+(-dÍÃ¸Í-gÍÃ°Í+jÍxÍ-yÍzÍ+yÍzÍ)e145",
    ///     "+(-eÍÃ¸Í-hÍÃ°Í+jÍyÍ+xÍzÍ-xÍzÍ)e245",
    ///     "+(-fÍÃ¸Í-iÍÃ°Í+jÍzÍ-xÍyÍ+xÍyÍ)e345",
    ///     "+(+xÍxÍ+yÍyÍ+zÍzÍ-Ã°ÍÃ°Í+Ã¸ÍÃ¸Í)e12345",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn double_rotoreflector() -> Self {
        Self::normal() + Self::plane_displacement() + Self::weight()
    }
    /// The multivector of transflector $`f_t \equiv h + p_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let transflector = Vee::normal().lhs() * Vee::translator().rhs();
    ///
    /// assert_eq!(transflector.basis_blades(), Vee::transflector().basis_blades());
    /// format_eq!(transflector, [
    ///     "+(-XÍxÍ-YÍyÍ-ZÍzÍ+ÃÍÃ°Í-ÃÍÃ¸Í)e0",
    ///     "+vÍxÍe1",
    ///     "+vÍyÍe2",
    ///     "+vÍzÍe3",
    ///     "+vÍÃ°Íe4",
    ///     "+vÍÃ¸Íe5",
    ///     "+(+XÍÃ¸Í-xÍÃÍ)e015",
    ///     "+(-YÍÃ¸Í+yÍÃÍ)e052",
    ///     "+(+ZÍÃ¸Í-zÍÃÍ)e035",
    ///     "+(+ÃÍÃ¸Í+ÃÍÃ°Í)e054",
    ///     "+(+XÍÃ°Í+xÍÃÍ)e014",
    ///     "+(-YÍÃ°Í-yÍÃÍ)e042",
    ///     "+(+ZÍÃ°Í+zÍÃÍ)e034",
    ///     "+(-YÍzÍ+ZÍyÍ)e032",
    ///     "+(+XÍzÍ-ZÍxÍ)e013",
    ///     "+(-XÍyÍ+YÍxÍ)e021",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn transflector() -> Self {
        Self::volume4() + Self::plane_moment()
    }
    /// The multivector of simple single flector $`f_{s1} \equiv h + p`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let simple_single_flector = Vee::volume4().lhs() * Vee::simple_single_motor().rhs();
    ///
    /// assert_eq!(simple_single_flector.basis_blades(),
    ///     Vee::simple_single_flector().basis_blades());
    /// format_eq!(simple_single_flector, [
    ///     "+(+WÍvÍ-XÍxÍ-YÍyÍ-ZÍzÍ+ÃÍÃ°Í-ÃÍÃ¸Í)e0",
    ///     "+(+bÍzÍ-cÍyÍ+dÍÃ°Í-gÍÃ¸Í+vÍxÍ)e1",
    ///     "+(-aÍzÍ+cÍxÍ+eÍÃ°Í-hÍÃ¸Í+vÍyÍ)e2",
    ///     "+(+aÍyÍ-bÍxÍ+fÍÃ°Í-iÍÃ¸Í+vÍzÍ)e3",
    ///     "+(-dÍxÍ-eÍyÍ-fÍzÍ-jÍÃ¸Í+vÍÃ°Í)e4",
    ///     "+(+gÍxÍ+hÍyÍ+iÍzÍ+jÍÃ°Í+vÍÃ¸Í)e5",
    ///     "+(+WÍgÍ+XÍÃ¸Í-xÍÃÍ)e015",
    ///     "+(-WÍhÍ-YÍÃ¸Í+yÍÃÍ)e052",
    ///     "+(+WÍiÍ+ZÍÃ¸Í-zÍÃÍ)e035",
    ///     "+(-WÍjÍ+ÃÍÃ¸Í+ÃÍÃ°Í)e054",
    ///     "+(-WÍdÍ+XÍÃ°Í+xÍÃÍ)e014",
    ///     "+(+WÍeÍ-YÍÃ°Í-yÍÃÍ)e042",
    ///     "+(-WÍfÍ+ZÍÃ°Í+zÍÃÍ)e034",
    ///     "+(-WÍaÍ-YÍzÍ+ZÍyÍ)e032",
    ///     "+(-WÍbÍ+XÍzÍ-ZÍxÍ)e013",
    ///     "+(-WÍcÍ-XÍyÍ+YÍxÍ)e021",
    ///     "+(+aÍÃ°Í+eÍzÍ-fÍyÍ)e234",
    ///     "+(-bÍÃ°Í+dÍzÍ-fÍxÍ)e134",
    ///     "+(+cÍÃ°Í+dÍyÍ-eÍxÍ)e124",
    ///     "+(+aÍxÍ+bÍyÍ+cÍzÍ)e123",
    ///     "+(-aÍÃ¸Í+hÍzÍ-iÍyÍ)e253",
    ///     "+(+bÍÃ¸Í+gÍzÍ-iÍxÍ)e315",
    ///     "+(-cÍÃ¸Í+gÍyÍ-hÍxÍ)e152",
    ///     "+(-dÍÃ¸Í-gÍÃ°Í+jÍxÍ)e145",
    ///     "+(-eÍÃ¸Í-hÍÃ°Í+jÍyÍ)e245",
    ///     "+(-fÍÃ¸Í-iÍÃ°Í+jÍzÍ)e345",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn simple_single_flector() -> Self {
        Self::volume4() + Self::plane()
    }
    /// The multivector of single flector $`f_1 \equiv h + p + P_\infty`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let single_flector = Vee::volume4().lhs() * Vee::single_motor().rhs();
    ///
    /// assert_eq!(single_flector.basis_blades(), Vee::single_flector().basis_blades());
    /// format_eq!(single_flector, [
    ///     "+(+WÍvÍ-XÍxÍ-YÍyÍ-ZÍzÍ+ÃÍÃ°Í-ÃÍÃ¸Í)e0",
    ///     "+(+bÍzÍ-cÍyÍ+dÍÃ°Í-gÍÃ¸Í+vÍxÍ)e1",
    ///     "+(-aÍzÍ+cÍxÍ+eÍÃ°Í-hÍÃ¸Í+vÍyÍ)e2",
    ///     "+(+aÍyÍ-bÍxÍ+fÍÃ°Í-iÍÃ¸Í+vÍzÍ)e3",
    ///     "+(-dÍxÍ-eÍyÍ-fÍzÍ-jÍÃ¸Í+vÍÃ°Í)e4",
    ///     "+(+gÍxÍ+hÍyÍ+iÍzÍ+jÍÃ°Í+vÍÃ¸Í)e5",
    ///     "+(+AÍÃ°Í+EÍzÍ-FÍyÍ+WÍgÍ+XÍÃ¸Í-xÍÃÍ)e015",
    ///     "+(-BÍÃ°Í+DÍzÍ-FÍxÍ-WÍhÍ-YÍÃ¸Í+yÍÃÍ)e052",
    ///     "+(+CÍÃ°Í+DÍyÍ-EÍxÍ+WÍiÍ+ZÍÃ¸Í-zÍÃÍ)e035",
    ///     "+(+AÍxÍ+BÍyÍ+CÍzÍ-WÍjÍ+ÃÍÃ¸Í+ÃÍÃ°Í)e054",
    ///     "+(-AÍÃ¸Í+HÍzÍ-IÍyÍ-WÍdÍ+XÍÃ°Í+xÍÃÍ)e014",
    ///     "+(+BÍÃ¸Í+GÍzÍ-IÍxÍ+WÍeÍ-YÍÃ°Í-yÍÃÍ)e042",
    ///     "+(-CÍÃ¸Í+GÍyÍ-HÍxÍ-WÍfÍ+ZÍÃ°Í+zÍÃÍ)e034",
    ///     "+(-DÍÃ¸Í-GÍÃ°Í+JÍxÍ-WÍaÍ-YÍzÍ+ZÍyÍ)e032",
    ///     "+(-EÍÃ¸Í-HÍÃ°Í+JÍyÍ-WÍbÍ+XÍzÍ-ZÍxÍ)e013",
    ///     "+(-FÍÃ¸Í-IÍÃ°Í+JÍzÍ-WÍcÍ-XÍyÍ+YÍxÍ)e021",
    ///     "+(+aÍÃ°Í+eÍzÍ-fÍyÍ)e234",
    ///     "+(-bÍÃ°Í+dÍzÍ-fÍxÍ)e134",
    ///     "+(+cÍÃ°Í+dÍyÍ-eÍxÍ)e124",
    ///     "+(+aÍxÍ+bÍyÍ+cÍzÍ)e123",
    ///     "+(-aÍÃ¸Í+hÍzÍ-iÍyÍ)e253",
    ///     "+(+bÍÃ¸Í+gÍzÍ-iÍxÍ)e315",
    ///     "+(-cÍÃ¸Í+gÍyÍ-hÍxÍ)e152",
    ///     "+(-dÍÃ¸Í-gÍÃ°Í+jÍxÍ)e145",
    ///     "+(-eÍÃ¸Í-hÍÃ°Í+jÍyÍ)e245",
    ///     "+(-fÍÃ¸Í-iÍÃ°Í+jÍzÍ)e345",
    ///     "+(-BÍzÍ+CÍyÍ-DÍÃ°Í+GÍÃ¸Í)e03245",
    ///     "+(+AÍzÍ-CÍxÍ-EÍÃ°Í+HÍÃ¸Í)e01345",
    ///     "+(-AÍyÍ+BÍxÍ-FÍÃ°Í+IÍÃ¸Í)e02145",
    ///     "+(+DÍxÍ+EÍyÍ+FÍzÍ+JÍÃ¸Í)e01235",
    ///     "+(-GÍxÍ-HÍyÍ-IÍzÍ-JÍÃ°Í)e01243",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn single_flector() -> Self {
        Self::volume4() + Self::plane() + Self::direction()
    }
    /// The multivector of double flector $`f_2 \equiv h + p + P`$.
    ///
    /// ```
    /// use vee::{format_eq, PgaP5 as Vee};
    ///
    /// let double_flector = Vee::volume4().lhs() * Vee::simple_double_motor().rhs();
    ///
    /// assert_eq!(double_flector.basis_blades(), Vee::double_flector().basis_blades());
    /// format_eq!(double_flector, [
    ///     "+(+WÍvÍ-XÍxÍ-YÍyÍ-ZÍzÍ+ÃÍÃ°Í-ÃÍÃ¸Í)e0",
    ///     "+(+bÍzÍ-cÍyÍ+dÍÃ°Í-gÍÃ¸Í+vÍxÍ)e1",
    ///     "+(-aÍzÍ+cÍxÍ+eÍÃ°Í-hÍÃ¸Í+vÍyÍ)e2",
    ///     "+(+aÍyÍ-bÍxÍ+fÍÃ°Í-iÍÃ¸Í+vÍzÍ)e3",
    ///     "+(-dÍxÍ-eÍyÍ-fÍzÍ-jÍÃ¸Í+vÍÃ°Í)e4",
    ///     "+(+gÍxÍ+hÍyÍ+iÍzÍ+jÍÃ°Í+vÍÃ¸Í)e5",
    ///     "+(+AÍÃ°Í+EÍzÍ-FÍyÍ+WÍgÍ+XÍÃ¸Í-xÍÃÍ)e015",
    ///     "+(-BÍÃ°Í+DÍzÍ-FÍxÍ-WÍhÍ-YÍÃ¸Í+yÍÃÍ)e052",
    ///     "+(+CÍÃ°Í+DÍyÍ-EÍxÍ+WÍiÍ+ZÍÃ¸Í-zÍÃÍ)e035",
    ///     "+(+AÍxÍ+BÍyÍ+CÍzÍ-WÍjÍ+ÃÍÃ¸Í+ÃÍÃ°Í)e054",
    ///     "+(-AÍÃ¸Í+HÍzÍ-IÍyÍ-WÍdÍ+XÍÃ°Í+xÍÃÍ)e014",
    ///     "+(+BÍÃ¸Í+GÍzÍ-IÍxÍ+WÍeÍ-YÍÃ°Í-yÍÃÍ)e042",
    ///     "+(-CÍÃ¸Í+GÍyÍ-HÍxÍ-WÍfÍ+ZÍÃ°Í+zÍÃÍ)e034",
    ///     "+(-DÍÃ¸Í-GÍÃ°Í+JÍxÍ-WÍaÍ-YÍzÍ+ZÍyÍ)e032",
    ///     "+(-EÍÃ¸Í-HÍÃ°Í+JÍyÍ-WÍbÍ+XÍzÍ-ZÍxÍ)e013",
    ///     "+(-FÍÃ¸Í-IÍÃ°Í+JÍzÍ-WÍcÍ-XÍyÍ+YÍxÍ)e021",
    ///     "+(+aÍÃ°Í+eÍzÍ-fÍyÍ+xÍÃ¸Í-xÍÃ¸Í)e234",
    ///     "+(-bÍÃ°Í+dÍzÍ-fÍxÍ-yÍÃ¸Í+yÍÃ¸Í)e134",
    ///     "+(+cÍÃ°Í+dÍyÍ-eÍxÍ+zÍÃ¸Í-zÍÃ¸Í)e124",
    ///     "+(+aÍxÍ+bÍyÍ+cÍzÍ-Ã°ÍÃ¸Í-Ã°ÍÃ¸Í)e123",
    ///     "+(-aÍÃ¸Í+hÍzÍ-iÍyÍ-xÍÃ°Í-xÍÃ°Í)e253",
    ///     "+(+bÍÃ¸Í+gÍzÍ-iÍxÍ+yÍÃ°Í+yÍÃ°Í)e315",
    ///     "+(-cÍÃ¸Í+gÍyÍ-hÍxÍ-zÍÃ°Í-zÍÃ°Í)e152",
    ///     "+(-dÍÃ¸Í-gÍÃ°Í+jÍxÍ-yÍzÍ+yÍzÍ)e145",
    ///     "+(-eÍÃ¸Í-hÍÃ°Í+jÍyÍ+xÍzÍ-xÍzÍ)e245",
    ///     "+(-fÍÃ¸Í-iÍÃ°Í+jÍzÍ-xÍyÍ+xÍyÍ)e345",
    ///     "+(+xÍxÍ+yÍyÍ+zÍzÍ-Ã°ÍÃ°Í+Ã¸ÍÃ¸Í)e12345",
    ///     "+(-BÍzÍ+CÍyÍ-DÍÃ°Í+GÍÃ¸Í-WÍxÍ)e03245",
    ///     "+(+AÍzÍ-CÍxÍ-EÍÃ°Í+HÍÃ¸Í-WÍyÍ)e01345",
    ///     "+(-AÍyÍ+BÍxÍ-FÍÃ°Í+IÍÃ¸Í-WÍzÍ)e02145",
    ///     "+(+DÍxÍ+EÍyÍ+FÍzÍ+JÍÃ¸Í+WÍÃ°Í)e01235",
    ///     "+(-GÍxÍ-HÍyÍ-IÍzÍ-JÍÃ°Í-WÍÃ¸Í)e01243",
    /// ]);
    ///
    /// let double_flector = Vee::volume4().lhs() * Vee::double_motor().rhs();
    ///
    /// assert_eq!(double_flector.basis_blades(), Vee::double_flector().basis_blades());
    /// format_eq!(double_flector, [
    ///     "+(+WÍvÍ-XÍxÍ-YÍyÍ-ZÍzÍ+ÃÍÃ°Í-ÃÍÃ¸Í)e0",
    ///     "+(+bÍzÍ-cÍyÍ+dÍÃ°Í-gÍÃ¸Í+vÍxÍ)e1",
    ///     "+(-aÍzÍ+cÍxÍ+eÍÃ°Í-hÍÃ¸Í+vÍyÍ)e2",
    ///     "+(+aÍyÍ-bÍxÍ+fÍÃ°Í-iÍÃ¸Í+vÍzÍ)e3",
    ///     "+(-dÍxÍ-eÍyÍ-fÍzÍ-jÍÃ¸Í+vÍÃ°Í)e4",
    ///     "+(+gÍxÍ+hÍyÍ+iÍzÍ+jÍÃ°Í+vÍÃ¸Í)e5",
    ///     "+(+AÍÃ°Í+EÍzÍ-FÍyÍ+WÍgÍ+XÍÃ¸Í-xÍÃÍ)e015",
    ///     "+(-BÍÃ°Í+DÍzÍ-FÍxÍ-WÍhÍ-YÍÃ¸Í+yÍÃÍ)e052",
    ///     "+(+CÍÃ°Í+DÍyÍ-EÍxÍ+WÍiÍ+ZÍÃ¸Í-zÍÃÍ)e035",
    ///     "+(+AÍxÍ+BÍyÍ+CÍzÍ-WÍjÍ+ÃÍÃ¸Í+ÃÍÃ°Í)e054",
    ///     "+(-AÍÃ¸Í+HÍzÍ-IÍyÍ-WÍdÍ+XÍÃ°Í+xÍÃÍ)e014",
    ///     "+(+BÍÃ¸Í+GÍzÍ-IÍxÍ+WÍeÍ-YÍÃ°Í-yÍÃÍ)e042",
    ///     "+(-CÍÃ¸Í+GÍyÍ-HÍxÍ-WÍfÍ+ZÍÃ°Í+zÍÃÍ)e034",
    ///     "+(-DÍÃ¸Í-GÍÃ°Í+JÍxÍ-WÍaÍ-YÍzÍ+ZÍyÍ)e032",
    ///     "+(-EÍÃ¸Í-HÍÃ°Í+JÍyÍ-WÍbÍ+XÍzÍ-ZÍxÍ)e013",
    ///     "+(-FÍÃ¸Í-IÍÃ°Í+JÍzÍ-WÍcÍ-XÍyÍ+YÍxÍ)e021",
    ///     "+(+aÍÃ°Í+eÍzÍ-fÍyÍ+xÍÃ¸Í-xÍÃ¸Í)e234",
    ///     "+(-bÍÃ°Í+dÍzÍ-fÍxÍ-yÍÃ¸Í+yÍÃ¸Í)e134",
    ///     "+(+cÍÃ°Í+dÍyÍ-eÍxÍ+zÍÃ¸Í-zÍÃ¸Í)e124",
    ///     "+(+aÍxÍ+bÍyÍ+cÍzÍ-Ã°ÍÃ¸Í-Ã°ÍÃ¸Í)e123",
    ///     "+(-aÍÃ¸Í+hÍzÍ-iÍyÍ-xÍÃ°Í-xÍÃ°Í)e253",
    ///     "+(+bÍÃ¸Í+gÍzÍ-iÍxÍ+yÍÃ°Í+yÍÃ°Í)e315",
    ///     "+(-cÍÃ¸Í+gÍyÍ-hÍxÍ-zÍÃ°Í-zÍÃ°Í)e152",
    ///     "+(-dÍÃ¸Í-gÍÃ°Í+jÍxÍ-yÍzÍ+yÍzÍ)e145",
    ///     "+(-eÍÃ¸Í-hÍÃ°Í+jÍyÍ+xÍzÍ-xÍzÍ)e245",
    ///     "+(-fÍÃ¸Í-iÍÃ°Í+jÍzÍ-xÍyÍ+xÍyÍ)e345",
    ///     "+(+xÍxÍ+yÍyÍ+zÍzÍ-Ã°ÍÃ°Í+Ã¸ÍÃ¸Í)e12345",
    ///     "+(-BÍzÍ+CÍyÍ-DÍÃ°Í+GÍÃ¸Í+VÍxÍ-WÍxÍ)e03245",
    ///     "+(+AÍzÍ-CÍxÍ-EÍÃ°Í+HÍÃ¸Í+VÍyÍ-WÍyÍ)e01345",
    ///     "+(-AÍyÍ+BÍxÍ-FÍÃ°Í+IÍÃ¸Í+VÍzÍ-WÍzÍ)e02145",
    ///     "+(+DÍxÍ+EÍyÍ+FÍzÍ+JÍÃ¸Í+VÍÃ°Í+WÍÃ°Í)e01235",
    ///     "+(-GÍxÍ-HÍyÍ-IÍzÍ-JÍÃ°Í+VÍÃ¸Í-WÍÃ¸Í)e01243",
    /// ]);
    /// ```
    #[must_use]
    #[inline]
    pub fn double_flector() -> Self {
        Self::volume4() + Self::plane() + Self::point()
    }
}

/// The named entities of the PGA with embedded dimension $`N = 6`$ (experimental, no inverse).
///
/// ```gdef
/// \gdef\e{
///   \boldsymbol e
/// }
/// \gdef\I{
///   \boldsymbol I
/// }
/// ```
impl<const M: i8> Multivector<Pga<M, 6>> {
    /// The multivector of scalar $`s \equiv v\e`$ where $`\e \equiv 1`$.
    #[must_use]
    #[inline]
    pub fn scalar() -> Self {
        Self::e()
    }
    /// The multivector of pseudoscalar $`S \equiv V\I`$ where $`\I \equiv \e_{0123456}`$.
    #[must_use]
    #[inline]
    pub fn pseudoscalar() -> Self {
        Self::e0123456()
    }
    /// The multivector of bias $`v^5_\infty \equiv W\e_0`$.
    #[must_use]
    #[inline]
    pub fn bias() -> Self {
        Self::e0()
    }
    /// The multivector of normal $`v^5_0 \equiv x\e_1 + y\e_2 + z\e_3 + Ã°\e_4 + Ã¸\e_5 + Ã¾\e_6`$.
    #[must_use]
    #[inline]
    pub fn normal() -> Self {
        Self::e1() + Self::e2() + Self::e3() + Self::e4() + Self::e5() + Self::e6()
    }
    /// The multivector of $`5`$-volume $`v^5 \equiv v^5_0 + v^5_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume5() -> Self {
        Self::bias() + Self::normal()
    }
    /// The multivector of $`4`$-volume moment $`v^4_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume4_moment() -> Self {
        Self::e01() + Self::e02() + Self::e03() + Self::e40() + Self::e05() + Self::e60()
    }
    /// The multivector of $`4`$-volume displacement $`v^4_0`$.
    #[must_use]
    #[inline]
    pub fn volume4_displacement() -> Self {
        Self::e12()
            + Self::e31()
            + Self::e41()
            + Self::e15()
            + Self::e16()
            + Self::e23()
            + Self::e42()
            + Self::e25()
            + Self::e62()
            + Self::e43()
            + Self::e35()
            + Self::e36()
            + Self::e45()
            + Self::e64()
            + Self::e56()
    }
    /// The multivector of $`4`$-volume $`v^4 \equiv v^4_0 + v^4_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume4() -> Self {
        Self::volume4_moment() + Self::volume4_displacement()
    }
    /// The multivector of volume moment $`v_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume_moment() -> Self {
        Self::e021()
            + Self::e013()
            + Self::e014()
            + Self::e015()
            + Self::e016()
            + Self::e032()
            + Self::e042()
            + Self::e052()
            + Self::e062()
            + Self::e034()
            + Self::e035()
            + Self::e036()
            + Self::e054()
            + Self::e064()
            + Self::e056()
    }
    /// The multivector of volume displacement $`v_0`$.
    #[must_use]
    #[inline]
    pub fn volume_displacement() -> Self {
        Self::e123()
            + Self::e124()
            + Self::e152()
            + Self::e126()
            + Self::e134()
            + Self::e315()
            + Self::e163()
            + Self::e145()
            + Self::e146()
            + Self::e165()
            + Self::e234()
            + Self::e253()
            + Self::e236()
            + Self::e245()
            + Self::e264()
            + Self::e256()
            + Self::e345()
            + Self::e346()
            + Self::e365()
            + Self::e456()
    }
    /// The multivector of volume $`v \equiv v_0 + v_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume() -> Self {
        Self::volume_moment() + Self::volume_displacement()
    }
    /// The multivector of plane moment $`p_\infty`$.
    #[must_use]
    #[inline]
    pub fn plane_moment() -> Self {
        Self::e0123()
            + Self::e0124()
            + Self::e0125()
            + Self::e0162()
            + Self::e0134()
            + Self::e0135()
            + Self::e0136()
            + Self::e0145()
            + Self::e0146()
            + Self::e0156()
            + Self::e0234()
            + Self::e0235()
            + Self::e0263()
            + Self::e0245()
            + Self::e0264()
            + Self::e0265()
            + Self::e0345()
            + Self::e0346()
            + Self::e0356()
            + Self::e0465()
    }
    /// The multivector of plane displacement $`p_0`$.
    #[must_use]
    #[inline]
    pub fn plane_displacement() -> Self {
        Self::e1234()
            + Self::e1235()
            + Self::e1263()
            + Self::e1245()
            + Self::e1264()
            + Self::e1256()
            + Self::e1345()
            + Self::e1364()
            + Self::e1356()
            + Self::e1465()
            + Self::e2345()
            + Self::e2364()
            + Self::e2356()
            + Self::e2465()
            + Self::e3465()
    }
    /// The multivector of plane $`p \equiv p_0 + p_\infty`$.
    #[must_use]
    #[inline]
    pub fn plane() -> Self {
        Self::plane_moment() + Self::plane_displacement()
    }
    /// The multivector of line moment $`\ell_\infty`$.
    #[must_use]
    #[inline]
    pub fn line_moment() -> Self {
        Self::e01234()
            + Self::e01235()
            + Self::e01236()
            + Self::e01245()
            + Self::e01264()
            + Self::e01265()
            + Self::e01345()
            + Self::e01346()
            + Self::e01356()
            + Self::e01456()
            + Self::e02345()
            + Self::e02364()
            + Self::e02365()
            + Self::e02456()
            + Self::e03456()
    }
    /// The multivector of line displacement $`\ell_0`$.
    #[must_use]
    #[inline]
    pub fn line_displacement() -> Self {
        Self::e12345()
            + Self::e12346()
            + Self::e12356()
            + Self::e12456()
            + Self::e13465()
            + Self::e23456()
    }
    /// The multivector of line $`\ell \equiv \ell_0 + \ell_\infty`$.
    #[must_use]
    #[inline]
    pub fn line() -> Self {
        Self::line_moment() + Self::line_displacement()
    }
    /// The multivector of direction $`P_\infty`$.
    #[must_use]
    #[inline]
    pub fn direction() -> Self {
        Self::e012345()
            + Self::e012436()
            + Self::e012356()
            + Self::e021456()
            + Self::e013456()
            + Self::e032456()
    }
    /// The multivector of weight $`P_0`$.
    #[must_use]
    #[inline]
    pub fn weight() -> Self {
        Self::e123456()
    }
    /// The multivector of point $`P \equiv P_0 + P_\infty`$.
    #[must_use]
    #[inline]
    pub fn point() -> Self {
        Self::direction() + Self::weight()
    }
}

/// The named entities of the PGA with embedded dimension $`N = 7`$ (experimental, no inverse).
///
/// ```gdef
/// \gdef\e{
///   \boldsymbol e
/// }
/// \gdef\I{
///   \boldsymbol I
/// }
/// ```
impl<const M: i8> Multivector<Pga<M, 7>> {
    /// The multivector of scalar $`s \equiv v\e`$ where $`\e \equiv 1`$.
    #[must_use]
    #[inline]
    pub fn scalar() -> Self {
        Self::e()
    }
    /// The multivector of pseudoscalar $`S \equiv V\I`$ where $`\I \equiv \e_{0123456}`$.
    #[must_use]
    #[inline]
    pub fn pseudoscalar() -> Self {
        Self::e01234567()
    }
    /// The multivector of bias $`v^6_\infty \equiv `$.
    #[must_use]
    #[inline]
    pub fn bias() -> Self {
        Self::e0()
    }
    /// The multivector of normal
    /// $`v^6_0 \equiv x\e_1 + y\e_2 + z\e_3 + Ã°\e_4 + Ã¸\e_5 + Ã¾\e_6 + Å\e_7`$.
    #[must_use]
    #[inline]
    pub fn normal() -> Self {
        Self::e1() + Self::e2() + Self::e3() + Self::e4() + Self::e5() + Self::e6() + Self::e7()
    }
    /// The multivector of $`6`$-volume $`v^6 \equiv v^6_0 + v^6_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume6() -> Self {
        Self::bias() + Self::normal()
    }
    /// The multivector of $`5`$-volume moment $`v^5_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume5_moment() -> Self {
        Self::e01()
            + Self::e02()
            + Self::e03()
            + Self::e04()
            + Self::e05()
            + Self::e06()
            + Self::e07()
    }
    /// The multivector of $`5`$-volume displacement $`v^5_0`$.
    #[must_use]
    #[inline]
    pub fn volume5_displacement() -> Self {
        Self::e23()
            + Self::e31()
            + Self::e12()
            + Self::e41()
            + Self::e42()
            + Self::e43()
            + Self::e15()
            + Self::e25()
            + Self::e35()
            + Self::e45()
            + Self::e16()
            + Self::e62()
            + Self::e36()
            + Self::e64()
            + Self::e56()
            + Self::e17()
            + Self::e27()
            + Self::e37()
            + Self::e47()
            + Self::e57()
            + Self::e67()
    }
    /// The multivector of $`5`$-volume $`v^5 \equiv v^5_0 + v^5_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume5() -> Self {
        Self::volume5_moment() + Self::volume5_displacement()
    }
    /// The multivector of $`4`$-volume moment $`v^4_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume4_moment() -> Self {
        Self::e012()
            + Self::e013()
            + Self::e014()
            + Self::e015()
            + Self::e016()
            + Self::e017()
            + Self::e023()
            + Self::e024()
            + Self::e025()
            + Self::e026()
            + Self::e027()
            + Self::e034()
            + Self::e035()
            + Self::e036()
            + Self::e037()
            + Self::e045()
            + Self::e046()
            + Self::e047()
            + Self::e056()
            + Self::e057()
            + Self::e067()
    }
    /// The multivector of $`4`$-volume displacement $`v^4_0`$.
    #[must_use]
    #[inline]
    pub fn volume4_displacement() -> Self {
        Self::e123()
            + Self::e124()
            + Self::e125()
            + Self::e126()
            + Self::e127()
            + Self::e134()
            + Self::e135()
            + Self::e136()
            + Self::e137()
            + Self::e145()
            + Self::e146()
            + Self::e147()
            + Self::e156()
            + Self::e157()
            + Self::e167()
            + Self::e234()
            + Self::e235()
            + Self::e236()
            + Self::e237()
            + Self::e245()
            + Self::e246()
            + Self::e247()
            + Self::e256()
            + Self::e257()
            + Self::e267()
            + Self::e345()
            + Self::e346()
            + Self::e347()
            + Self::e356()
            + Self::e357()
            + Self::e367()
            + Self::e456()
            + Self::e457()
            + Self::e467()
            + Self::e567()
    }
    /// The multivector of $`4`$-volume $`v^4 \equiv v^4_0 + v^4_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume4() -> Self {
        Self::volume4_moment() + Self::volume4_displacement()
    }
    /// The multivector of volume moment $`v_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume_moment() -> Self {
        Self::e0123()
            + Self::e0124()
            + Self::e0125()
            + Self::e0126()
            + Self::e0127()
            + Self::e0134()
            + Self::e0135()
            + Self::e0136()
            + Self::e0137()
            + Self::e0145()
            + Self::e0146()
            + Self::e0147()
            + Self::e0156()
            + Self::e0157()
            + Self::e0167()
            + Self::e0234()
            + Self::e0235()
            + Self::e0236()
            + Self::e0237()
            + Self::e0245()
            + Self::e0246()
            + Self::e0247()
            + Self::e0256()
            + Self::e0257()
            + Self::e0267()
            + Self::e0345()
            + Self::e0346()
            + Self::e0347()
            + Self::e0356()
            + Self::e0357()
            + Self::e0367()
            + Self::e0456()
            + Self::e0457()
            + Self::e0467()
            + Self::e0567()
    }
    /// The multivector of volume displacement $`v_0`$.
    #[must_use]
    #[inline]
    pub fn volume_displacement() -> Self {
        Self::e1234()
            + Self::e1253()
            + Self::e1236()
            + Self::e1273()
            + Self::e1245()
            + Self::e1264()
            + Self::e1247()
            + Self::e1256()
            + Self::e1275()
            + Self::e1267()
            + Self::e1354()
            + Self::e1346()
            + Self::e1374()
            + Self::e1365()
            + Self::e1357()
            + Self::e1376()
            + Self::e1456()
            + Self::e1475()
            + Self::e1467()
            + Self::e1576()
            + Self::e2345()
            + Self::e2364()
            + Self::e2347()
            + Self::e2356()
            + Self::e2375()
            + Self::e2367()
            + Self::e2465()
            + Self::e2457()
            + Self::e2476()
            + Self::e2567()
            + Self::e3456()
            + Self::e3475()
            + Self::e3467()
            + Self::e3576()
            + Self::e4567()
    }
    /// The multivector of volume $`v \equiv v_0 + v_\infty`$.
    #[must_use]
    #[inline]
    pub fn volume() -> Self {
        Self::volume_moment() + Self::volume_displacement()
    }
    /// The multivector of plane moment $`p_\infty`$.
    #[must_use]
    #[inline]
    pub fn plane_moment() -> Self {
        Self::e01243()
            + Self::e01235()
            + Self::e01263()
            + Self::e01237()
            + Self::e01254()
            + Self::e01246()
            + Self::e01274()
            + Self::e01265()
            + Self::e01257()
            + Self::e01276()
            + Self::e01345()
            + Self::e01364()
            + Self::e01347()
            + Self::e01356()
            + Self::e01375()
            + Self::e01367()
            + Self::e01465()
            + Self::e01457()
            + Self::e01476()
            + Self::e01567()
            + Self::e02354()
            + Self::e02346()
            + Self::e02374()
            + Self::e02365()
            + Self::e02357()
            + Self::e02376()
            + Self::e02456()
            + Self::e02475()
            + Self::e02467()
            + Self::e02576()
            + Self::e03465()
            + Self::e03457()
            + Self::e03476()
            + Self::e03567()
            + Self::e04576()
    }
    /// The multivector of plane displacement $`p_0`$.
    #[must_use]
    #[inline]
    pub fn plane_displacement() -> Self {
        Self::e12345()
            + Self::e12364()
            + Self::e12347()
            + Self::e12356()
            + Self::e12375()
            + Self::e12367()
            + Self::e12465()
            + Self::e12457()
            + Self::e12476()
            + Self::e12567()
            + Self::e13456()
            + Self::e13475()
            + Self::e13467()
            + Self::e13576()
            + Self::e14567()
            + Self::e23465()
            + Self::e23457()
            + Self::e23476()
            + Self::e23567()
            + Self::e24576()
            + Self::e34567()
    }
    /// The multivector of plane $`p \equiv p_0 + p_\infty`$.
    #[must_use]
    #[inline]
    pub fn plane() -> Self {
        Self::plane_moment() + Self::plane_displacement()
    }
    /// The multivector of line moment $`\ell_\infty`$.
    #[must_use]
    #[inline]
    pub fn line_moment() -> Self {
        Self::e012345()
            + Self::e012364()
            + Self::e012347()
            + Self::e012356()
            + Self::e012357()
            + Self::e012367()
            + Self::e012465()
            + Self::e012457()
            + Self::e012476()
            + Self::e012576()
            + Self::e013456()
            + Self::e013457()
            + Self::e013467()
            + Self::e013567()
            + Self::e014567()
            + Self::e023465()
            + Self::e023457()
            + Self::e023647()
            + Self::e023657()
            + Self::e024567()
            + Self::e034567()
    }
    /// The multivector of line displacement $`\ell_0`$.
    #[must_use]
    #[inline]
    pub fn line_displacement() -> Self {
        Self::e123456()
            + Self::e123475()
            + Self::e123467()
            + Self::e123576()
            + Self::e124567()
            + Self::e134657()
            + Self::e234567()
    }
    /// The multivector of line $`\ell \equiv \ell_0 + \ell_\infty`$.
    #[must_use]
    #[inline]
    pub fn line() -> Self {
        Self::line_moment() + Self::line_displacement()
    }
    // 7
    /// The multivector of direction $`P_\infty`$.
    #[must_use]
    #[inline]
    pub fn direction() -> Self {
        Self::e0124356()
            + Self::e0123457()
            + Self::e0124367()
            + Self::e0123567()
            + Self::e0214567()
            + Self::e0134567()
            + Self::e0324567()
    }
    /// The multivector of weight $`P_0`$.
    #[must_use]
    #[inline]
    pub fn weight() -> Self {
        Self::e1234567()
    }
    /// The multivector of point $`P \equiv P_0 + P_\infty`$.
    #[must_use]
    #[inline]
    pub fn point() -> Self {
        Self::direction() + Self::weight()
    }
}

// #[test]
// fn dim() {
//     assert!(TAB.windows(2).all(|tab| {
//         let a = tab[0];
//         let b = tab[1];
//         a.iter().all(|a| b.iter().any(|b| b.sym == a.sym))
//     }));
// }

#[test]
#[allow(clippy::cognitive_complexity)]
fn not() {
    use super::{PgaP0, PgaP1, PgaP2, PgaP3, PgaP4, PgaP5, PgaP6, PgaP7};

    assert_eq!(!PgaP0::norm(), PgaP0::norm().swp());

    assert_eq!(
        !PgaP1::point(),
        (PgaP1::weight() - PgaP1::direction()).swp()
    );

    assert_eq!(!PgaP2::line(), PgaP2::point().swp());
    assert_eq!(!PgaP2::point(), PgaP2::line().swp());

    assert_eq!(!PgaP3::plane(), PgaP3::point().swp());
    assert_eq!(!PgaP3::line(), PgaP3::line().swp());
    assert_eq!(!PgaP3::point(), -PgaP3::plane().swp());

    assert_eq!(!PgaP4::volume(), PgaP4::point().swp());
    assert_eq!(!PgaP4::plane(), PgaP4::line().swp());
    assert_eq!(!PgaP4::line(), PgaP4::plane().swp());
    assert_eq!(!PgaP4::point(), PgaP4::volume().swp());

    assert_eq!(!PgaP5::volume4(), PgaP5::point().swp());
    assert_eq!(!PgaP5::volume(), PgaP5::line().swp());
    assert_eq!(
        !PgaP5::plane(),
        (PgaP5::plane_moment() - PgaP5::plane_displacement()).swp()
    );
    assert_eq!(!!PgaP5::plane(), -PgaP5::plane());
    assert_eq!(!PgaP5::line(), PgaP5::volume().swp());
    assert_eq!(!PgaP5::point(), -PgaP5::volume4().swp());

    assert_eq!(!PgaP6::volume5(), PgaP6::point().swp());
    assert_eq!(!PgaP6::volume4(), PgaP6::line().swp());
    assert_eq!(!PgaP6::volume(), PgaP6::plane().swp());
    assert_eq!(!PgaP6::plane(), PgaP6::volume().swp());
    assert_eq!(!PgaP6::line(), PgaP6::volume4().swp());
    assert_eq!(!PgaP6::point(), PgaP6::volume5().swp());

    assert_eq!(!PgaP7::volume6(), PgaP7::point().swp());
    assert_eq!(!PgaP7::volume5(), PgaP7::line().swp());
    assert_eq!(!PgaP7::volume4(), PgaP7::plane().swp());
    assert_eq!(!PgaP7::volume(), PgaP7::volume().swp());
    assert_eq!(!PgaP7::plane(), -PgaP7::volume4().swp());
    assert_eq!(!PgaP7::line(), PgaP7::volume5().swp());
    assert_eq!(!PgaP7::point(), -PgaP7::volume6().swp());
}

#[test]
fn mul() {
    use std::{
        fs::{read_to_string, write},
        path::Path,
    };
    let tables = [
        ("PgaE0", PgaE0::table()),
        ("PgaE1", PgaE1::table()),
        ("PgaE2", PgaE2::table()),
        ("PgaE3", PgaE3::table()),
        ("PgaE4", PgaE4::table()),
        ("PgaE5", PgaE5::table()),
        ("PgaE6", PgaE6::table()),
        ("PgaE7", PgaE7::table()),
        ("PgaH0", PgaH0::table()),
        ("PgaH1", PgaH1::table()),
        ("PgaH2", PgaH2::table()),
        ("PgaH3", PgaH3::table()),
        ("PgaH4", PgaH4::table()),
        ("PgaH5", PgaH5::table()),
        ("PgaH6", PgaH6::table()),
        ("PgaH7", PgaH7::table()),
        ("PgaP0", PgaP0::table()),
        ("PgaP1", PgaP1::table()),
        ("PgaP2", PgaP2::table()),
        ("PgaP3", PgaP3::table()),
        ("PgaP4", PgaP4::table()),
        ("PgaP5", PgaP5::table()),
        ("PgaP6", PgaP6::table()),
        ("PgaP7", PgaP7::table()),
    ];
    for (pga, table) in tables {
        let path = Path::new("tests").join(pga).with_extension("ct");
        if let Ok(text) = read_to_string(&path) {
            assert_eq!(table, Ok(text));
        } else {
            write(&path, table.unwrap()).unwrap();
        }
    }
}
